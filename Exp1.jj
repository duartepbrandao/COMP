//options
//{
//  LOOKAHEAD=1;
//}

PARSER_BEGIN(Exp1)
import java.util.Comparator;
import java.io.InputStream;
import java.util.Scanner;
// código Java que invoca o parser
public class Exp1 {

static java.util.List<Item> items;
static String order_token;
//static java.util.List<String> crossRef;

public static void main(String args[]) throws ParseException {

//= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
//inicializaçao da lista de items a ser guardados
items = new java.util.ArrayList<Item>();
if (Item.subs==null) Item.subs = new StringOperator();
order_token="";
//= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
//send stuff to parser
//receber do teclado
//String input = readFile("test.txt", StandardCharsets.UTF_8);
try{
	System.out.print("Enter the file name:");
	Scanner userInput = new Scanner(System.in);
	String location = userInput.next();
java.io.InputStream input = new java.io.FileInputStream(location);
Exp1 parser = new Exp1(input);//System.in);
System.out.println("___________________________________________________");
System.out.println("- - - - - - - - - - - - - - - - - - - - - - - - - -");
try{
parser.Start();
}catch(ParseException e){}
}catch(Exception e){ System.out.println("FAILED TO READ FILE"); return; }
//= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
//order stuff
if (order_token!="")//create a token later for ordering stuff
java.util.Collections.sort(items, new ItemComparator(order_token));
//= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
//check semantics
System.out.println("___________________________________________________");
System.out.println("- - - - - - - - - - - - - - - - - - - - - - - - - -");
System.out.println("The compiler will try to discard errors mentioned above and compile the rest");
System.out.println("The warnings and errors below are relative to the parts that where not discarded");
System.out.println("---------------------------------------------------");
for(int i = 0; i<items.size(); i++)
{
	Item it = items.get(i);
		
	//check item's entries
	int problemsFound=items.get(i).validateItem();
		
	int occur=1;//how many times the same id is found
	boolean missing=true;//if crossre is missing

	String cref = it.getEntry("crossref");
	if (!cref.equals("?"))
	{
		
	for(int j = 0; j<items.size(); j++){
		//check if cossrefered item exists
		if ( items.get(j).id.equals(cref))
		{
			items.get(i).crossref = items.get(j);
			missing=false;
		}
		if(j>i)//check items with same id
		{
			if(items.get(j).id.equals(it.id) ) 
			{
				occur++;
				items.remove(j);
				j--;
			}
		}	
	}	
	
	if (missing) System.out.println("Warning: In item <" + items.get(i).id +"> was not found the given crossreference <"+ cref +">");
	}
	else for(int j = i+1; j<items.size(); j++){//check items with same id
			if(items.get(j).id.equals(it.id) ) 
			{
				occur++;
				items.remove(j);
				j--;
			}		
		}
	if(occur>1) 
	{
		problemsFound++;
		System.out.println("Error:Item <" + it.id + "> as " + occur + " definitions. The compiler will only take into account the first occurrence."  ) ;
	}
		if ( problemsFound>0) 
			System.out.println("Item <" + items.get(i).id +"> has "+ problemsFound +" problems"); 
	
}
//= = = = = = = = = = = = = = = = =  = = = = = = = = = = = = = = = = = =
//export 2 file
	try{
	System.out.println("___________________________________________________");
	System.out.println("- - - - - - - - - - - - - - - - - - - - - - - - - -");
	//java.io.PrintWriter out = new java.io.PrintWriter("biblio.html");
	System.out.print("Enter the name of the output file:");
	Scanner outputScanner = new Scanner(System.in);
	String filename = outputScanner.next();
	java.io.PrintWriter out = new java.io.PrintWriter(filename);
	
	
	out.println("<!DOCTYPE html>");
	out.println("<html>");

/*
<head>
  <title>Page Title</title>
</head>
*/
	out.println("<body>\n");
	for(int i = 0; i<items.size(); i++)
	{
		//export item to output file
		items.get(i).save2HTML(out);
		// /*debug:*/System.out.println(items.get(i).id);
	}
	out.println("</body>\n");
	out.println("</html>");
	out.close();
	System.out.println("SUCCESSFULY CREATED OUTPUT FILE");
	}catch(Exception e) {
	System.out.println("FAILED 2 CREATE OUTPUT FILE");
	}
}
}
PARSER_END(Exp1)
// símbolos que não devem ser considerados na análise
SKIP :
{
 " " | "\t" | "\r" | "\n"
}
// definição dos tokens (símbolos terminais)
TOKEN:
{
	<ORDER_SIGN: "##" >:ORDER_TOKENS

	//===========================================
	//DEFINIR TIPOS
	//===========================================
	|<T_ARTICLE:("a"|"A")("r"|"R")("t"|"T")("i"|"I")("c"|"C")("l"|"L")("e"|"E")>
	|<T_BOOK:("b"|"B")("o"|"O")("o"|"O")("k"|"K")>
	|<T_BOOKLET:("b"|"B")("o"|"O")("o"|"O")("k"|"K")("l"|"L")("e"|"E")("t"|"T")>
	|<T_CONFERENCE:("c"|"C")("o"|"O")("n"|"N")("f"|"F")("e"|"E")("r"|"R")("e"|"E")("n"|"N")("c"|"C")("e"|"E")>
	|<T_ELECTRONIC:("e"|"E")("l"|"L")("e"|"E")("c"|"C")("t"|"T")("r"|"R")("o"|"O")("n"|"N")("i"|"I")("c"|"C")>
	|<T_INBOOK:("i"|"I")("n"|"N")("b"|"B")("o"|"O")("o"|"O")("k"|"K")>
	|<T_INCOLLECTION:("i"|"I")("n"|"N")("c"|"C")("o"|"O")("l"|"L")("l"|"L")("e"|"E")("c"|"C")("t"|"T")("i"|"I")("o"|"O")("n"|"N")>
	|<T_INPROCEEDINGS:("i"|"I")("n"|"N")("p"|"P")("r"|"R")("o"|"O")("c"|"C")("e"|"E")("e"|"E")("d"|"D")("i"|"I")("n"|"N")("g"|"G")("s"|"S")>
	|<T_MANUAL:("m"|"M")("a"|"A")("n"|"N")("u"|"U")("a"|"A")("l"|"L")>
	|<T_MASTERTHESIS:("m"|"M")("a"|"A")("s"|"S")("t"|"T")("e"|"E")("r"|"R")("t"|"T")("h"|"H")("e"|"E")("s"|"S")("i"|"I")("s"|"S")>
	|<T_MISC:("m"|"M")("i"|"I")("s"|"S")("c"|"C")>
	|<T_OTHER:("o"|"O")("t"|"T")("h"|"H")("e"|"E")("r"|"R")>
	|<T_PATENT:("p"|"P")("a"|"A")("t"|"T")("e"|"E")("n"|"N")("t"|"T")>
	|<T_PERIODICAL:("p"|"P")("e"|"E")("r"|"R")("i"|"I")("o"|"O")("d"|"D")("i"|"I")("c"|"C")("a"|"A")("l"|"L")>
	|<T_PHDTHESIS:("p"|"P")("h"|"H")("d"|"D")("t"|"T")("h"|"H")("e"|"E")("s"|"S")("i"|"I")("s"|"S")>
	|<T_PROCEEDINGS:("p"|"P")("r"|"R")("o"|"O")("c"|"C")("e"|"E")("e"|"E")("d"|"D")("i"|"I")("n"|"N")("g"|"G")("s"|"S")>
	|<T_STANDARD:("s"|"S")("t"|"T")("a"|"A")("n"|"N")("d"|"D")("a"|"A")("r"|"R")("d"|"D")>
	|<T_TECHREPORT:("t"|"T")("e"|"E")("c"|"C")("h"|"H")("r"|"R")("e"|"E")("p"|"P")("o"|"O")("r"|"R")("t"|"T")>
	|<T_UNPUBLISHED:("u"|"U")("n"|"N")("p"|"P")("u"|"U")("b"|"B")("l"|"L")("i"|"I")("s"|"S")("h"|"H")("e"|"E")("d"|"D")>

	|<T_STRING_STATE:("s"|"S")("t"|"T")("r"|"R")("i"|"I")("n"|"N")("g"|"G")>: STRING_STATE
	//===========================================
	//GENERAL ENTRIES
	//===========================================
	//<ENTRY_CROSSREF>|<ENTRY_KEYWORDS>|<ENTRY_FILE>|<ENTRY_DOI>|<ENTRY_URL>|<ENTRY_COMMENT>|<ENTRY_OWNER>|<ENTRY_TIMESTAMP>
|<CROSSREF:("c"|"C")("r"|"R")("o"|"O")("s"|"S")("s"|"S")("r"|"R")("e"|"E")("f"|"F")>
	|<ENTRY_CROSSREF: <CROSSREF> "=" <INFO_OPEN> (["a"-"z","A"-"Z","0"-"9"])+ <INFO_CLOSE> >
|<KEYWORDS:("k"|"K")("e"|"E")("y"|"Y")("w"|"W")("o"|"O")("r"|"R")("d"|"D")("s"|"S")>
	|<ENTRY_KEYWORDS: <KEYWORDS> "=" <INFO_OPEN> (["a"-"z","A"-"Z","0"-"9"])+ <INFO_CLOSE> >
|<FILE:("f"|"F")("i"|"I")("l"|"L")("e"|"E")>
	|<ENTRY_FILE: <FILE> "=" <INFO_OPEN> (["a"-"z","A"-"Z","0"-"9"])+ <INFO_CLOSE> >
|<DOI:("d"|"D")("o"|"O")("i"|"I")>
	|<ENTRY_DOI: <DOI> "=" <INFO_OPEN> (["a"-"z","A"-"Z","0"-"9"])+ <INFO_CLOSE> >
|<URL:("u"|"U")("r"|"R")("l"|"L")>
	|<ENTRY_URL:  <URL> "=" <INFO_OPEN> (~["{","}","\""])+ <INFO_CLOSE>  >
|<COMMENT:("c"|"C")("o"|"O")("m"|"M")("m"|"M")("e"|"E")("n"|"N")("t"|"T")>
	|<ENTRY_COMMENT: <COMMENT> "=" <INFO_OPEN> (~["{","}","\""])+ <INFO_CLOSE> >
|<OWNER:("o"|"O")("w"|"W")("n"|"N")("e"|"E")("r"|"R")>
	|<ENTRY_OWNER: <OWNER> "=" <INFO_OPEN> (~["{","}","\""])+ <INFO_CLOSE> >
|<TIMESTAMP:("t"|"T")("i"|"I")("m"|"M")("e"|"E")("s"|"S")("t"|"T")("a"|"A")("m"|"M")("p"|"P")>
	|<ENTRY_TIMESTAMP: <TIMESTAMP> "=" <INFO_OPEN> (["a"-"z","A"-"Z","0"-"9"])+ <INFO_CLOSE> >
//= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =  = = = = == = = = = = = = = =
|<ABSTRACT:("a"|"A")("b"|"B")("s"|"S")("t"|"T")("r"|"R")("a"|"A")("c"|"C")("t"|"T")>
	|<ENTRY_ABSTRACT: <ABSTRACT> "=" <INFO_OPEN> (["a"-"z","A"-"Z","0"-"9"])+ <INFO_CLOSE> >
|<REVIEW:("r"|"R")("e"|"E")("v"|"V")("i"|"I")("e"|"E")("w"|"W")>
	|<ENTRY_REVIEW: <REVIEW> "=" <INFO_OPEN> (["a"-"z","A"-"Z","0"-"9"])+ <INFO_CLOSE> >
|<ANNOTATE:("a"|"A")("n"|"N")("n"|"N")("o"|"O")("t"|"T")("a"|"A")("t"|"T")("e"|"E")>
	|<ENTRY_ANNOTATE: <ANNOTATE> <INFO_OPEN> (~["{","}","\""])+ <INFO_CLOSE> > // VERIFICAR!!!!!!!!!
	//===========================================
	//ENTRIES
	//===========================================
	/*
	NOTES:
	NOW USING ~["{","}","\""])+ IN ALL TYPES SINCE 
	>NO WARNINGS WERE SENT,
	>ITS ACEPTABLE IN BIBTEC BY DEFAULT
	>IS NEEDED FOR @STRING SUBTITUTION
	(YES COUD MAKE A SUBTOKEN NOW BUT NOT RLY IMPORTANT CAUSE CPY PASTE ALSO WORKS)
	(NOT SURE HOW TO INCLUDE NUMS THERE =/)
	*/
|<AUTHOR: ("a"|"A")("u"|"U")("t"|"T")("h"|"H")("o"|"O")("r"|"R") >
	|<ENTRY_AUTHOR: <AUTHOR> "=" <INFO_OPEN> (~["{","}","\""])+ <INFO_CLOSE> >
|<TITLE:("t"|"T")("i"|"I")("t"|"T")("l"|"L")("e"|"E")>
	|<ENTRY_TITLE:  <TITLE> "=" <INFO_OPEN> (~["{","}","\""])+ <INFO_CLOSE>  >
|<PUBLISHER:("p"|"P")("u"|"U")("b"|"B")("l"|"L")("i"|"I")("s"|"S")("h"|"H")("e"|"E")("r"|"R")>
	|<ENTRY_PUBLISHER: <PUBLISHER> "=" <INFO_OPEN> (~["{","}","\""])+ <INFO_CLOSE> >
//|<KEY:("k"|"K")("e"|"E")("y"|"Y")>
//	|<ENTRY_KEY: <KEY> "=" <INFO_OPEN> (~["{","}","\""])+ <INFO_CLOSE> > // VERIFICAR!!!!!!!!!
|<VOLUME:("v"|"V")("o"|"O")("l"|"L")("u"|"U")("m"|"M")("e"|"E")>
	|<ENTRY_VOLUME: <VOLUME> <INFO_OPEN> (~["{","}","\""])+ <INFO_CLOSE> >
|<NUMBER:("n"|"N")("u"|"U")("m"|"M")("b"|"B")("e"|"E")("r"|"R")>
	|<ENTRY_NUMBER: <NUMBER> <INFO_OPEN> (~["{","}","\""])+ <INFO_CLOSE> >
|<SERIES:("s"|"S")("e"|"E")("r"|"R")("i"|"I")("e"|"E")("s"|"S")>
	|<ENTRY_SERIES: <SERIES> <INFO_OPEN> (~["{","}","\""])+ <INFO_CLOSE> >
|<ADDRESS:("a"|"A")("d"|"D")("d"|"D")("r"|"R")("e"|"E")("s"|"S")("s"|"S")>
	|<ENTRY_ADDRESS: <ADDRESS> "=" <INFO_OPEN> (~["{","}","\""])+ <INFO_CLOSE> >
|<EDITION:("e"|"E")("d"|"D")("i"|"I")("t"|"T")("i"|"I")("o"|"O")("n"|"N")>
	|<ENTRY_EDITION: <EDITION> <INFO_OPEN> (~["{","}","\""])+ <INFO_CLOSE> >
|<NOTE:("n"|"N")("o"|"O")("t"|"T")("e"|"E")>
	|<ENTRY_NOTE: <NOTE> "=" <INFO_OPEN> (~["{","}","\""])+ <INFO_CLOSE> >
|<PAGES:("p"|"P")("a"|"A")("g"|"G")("e"|"E")("s"|"S")>
	|<ENTRY_PAGES: "pages" <INFO_OPEN> (~["{","}","\""])+ <INFO_CLOSE> >
|<JOURNAL:("j"|"J")("o"|"O")("u"|"U")("r"|"R")("n"|"N")("a"|"A")("l"|"L")>
	|<ENTRY_JOURNAL: <JOURNAL> <INFO_OPEN> (~["{","}","\""])+ <INFO_CLOSE> >
|<ORGANIZATION:("o"|"O")("r"|"R")("g"|"G")("a"|"A")("n"|"N")("i"|"I")("z"|"Z")("a"|"A")("t"|"T")("i"|"I")("o"|"O")("n"|"N")>
	|<ENTRY_ORGANIZATION: <ORGANIZATION> <INFO_OPEN> (~["{","}","\""])+ <INFO_CLOSE> >
|<BOOKTITLE:("b"|"B")("o"|"O")("o"|"O")("k"|"K")("t"|"T")("i"|"I")("t"|"T")("l"|"L")("e"|"E")>
	|<ENTRY_BOOKTITLE: <BOOKTITLE> "=" <INFO_OPEN> (~["{","}","\""])+ <INFO_CLOSE>  >
|<EDITOR:("e"|"E")("d"|"D")("i"|"I")("t"|"T")("o"|"O")("r"|"R")>
	|<ENTRY_EDITOR: <EDITOR> "=" <INFO_OPEN> (~["{","}","\""])+ <INFO_CLOSE>  >
|<SCHOOL:("s"|"S")("c"|"C")("h"|"H")("o"|"O")("o"|"O")("l"|"L")>
	|<ENTRY_SCHOOL: <SCHOOL> "=" <INFO_OPEN> (~["{","}","\""])+ <INFO_CLOSE>  >
|<TYPE:("t"|"T")("y"|"Y")("p"|"P")("e"|"E")>
	|<ENTRY_TYPE: <TYPE> "=" <INFO_OPEN> (~["{","}","\""])+ <INFO_CLOSE>  >
|<HOWPUBLISHED:("h"|"H")("o"|"O")("w"|"W")("p"|"P")("u"|"U")("b"|"B")("l"|"L")("i"|"I")("s"|"S")("h"|"H")("e"|"E")("d"|"D")>
	|<ENTRY_HOWPUBLISHED: <HOWPUBLISHED> "=" <INFO_OPEN> (~["{","}","\""])+ <INFO_CLOSE>  >
|<LANGUAGE:("l"|"L")("a"|"A")("n"|"N")("g"|"G")("u"|"U")("a"|"A")("g"|"G")("e"|"E")>
	|<ENTRY_LANGUAGE: <LANGUAGE> "=" <INFO_OPEN> (~["{","}","\""])+ <INFO_CLOSE>  >
|<CHAPTER:("c"|"C")("h"|"H")("a"|"A")("p"|"P")("t"|"T")("e"|"E")("r"|"R")>
	|<ENTRY_CHAPTER: <CHAPTER> "=" <INFO_OPEN> (~["{","}","\""])+ <INFO_CLOSE>  >
|<NATIONALITY:("n"|"N")("a"|"A")("t"|"T")("i"|"I")("o"|"O")("n"|"N")("a"|"A")("l"|"L")("i"|"I")("t"|"T")("y"|"Y")>
	|<ENTRY_NATIONALITY: <NATIONALITY> "=" <INFO_OPEN> (~["{","}","\""])+ <INFO_CLOSE>  >
|<ASSIGNEE:("a"|"A")("s"|"S")("s"|"S")("i"|"I")("g"|"G")("n"|"N")("e"|"E")("e"|"E")>
	|<ENTRY_ASSIGNEE: <ASSIGNEE> "=" <INFO_OPEN> (~["{","}","\""])+ <INFO_CLOSE>  >
|<INSTITUTION:("i"|"I")("n"|"N")("s"|"S")("t"|"T")("i"|"I")("t"|"T")("u"|"U")("t"|"T")("i"|"I")("o"|"O")("n"|"N")>
	|<ENTRY_INSTITUTION: <INSTITUTION> "=" <INFO_OPEN> (~["{","}","\""])+ <INFO_CLOSE> >	
|<REVISION:("r"|"R")("e"|"E")("v"|"V")("i"|"I")("s"|"S")("i"|"I")("o"|"O")("n"|"N")>
	|<ENTRY_REVISION: <REVISION> "=" <INFO_OPEN> (~["{","}","\""])+ <INFO_CLOSE> >	
	
|<YEAR:("y"|"Y")("e"|"E")("a"|"A")("r"|"R")>
	|<ENTRY_YEAR: <YEAR> "=" <INFO_OPEN> (~["{","}","\""])+ <INFO_CLOSE> >	
|<YEARFILED:("y"|"Y")("e"|"E")("a"|"A")("r"|"R")("f"|"F")("i"|"I")("l"|"L")("e"|"E")("d"|"D")>
	|<ENTRY_YEARFILED: <YEARFILED> "=" <INFO_OPEN> (~["{","}","\""])+ <INFO_CLOSE>  >
|<MONTH:("m"|"M")("o"|"O")("n"|"N")("t"|"T")("h"|"H")>
	|<ENTRY_MONTH: <MONTH> "=" <INFO_OPEN> (~["{","}","\""])+ <INFO_CLOSE> >
|<MONTHFILED:("m"|"M")("o"|"O")("n"|"N")("t"|"T")("h"|"H")("f"|"F")("i"|"I")("l"|"L")("e"|"E")("d"|"D")>
	|<ENTRY_MONTHFILED: <MONTHFILED> "=" <INFO_OPEN> (~["{","}","\""])+ <INFO_CLOSE>  >
|<DAYFILED:("d"|"D")("a"|"A")("y"|"Y")("f"|"F")("i"|"I")("l"|"L")("e"|"E")("d"|"D")>
	|<ENTRY_DAYFILED: <DAYFILED> "=" <INFO_OPEN> (~["{","}","\""])+ <INFO_CLOSE>  >
|<DAY:("d"|"D")("a"|"A")("y"|"Y")>	
	|<ENTRY_DAY: <DAY> "=" <INFO_OPEN> (~["{","}","\""])+ <INFO_CLOSE>  >
	//===========================================
	//DEFINIÇOES BASICAS
	//===========================================
	|<ID: (["a"-"z","A"-"Z","0"-"9"])+>
	|<INFO_SEPARATOR: "," >
	|<START_ITEM: "@" >
	|<OPEN_ITEM: "{" >
	|<END_ITEM: "}" >

	|<INFO_OPEN: "{" | "\"" >
	|<INFO_CLOSE: "}" | "\"" >

	//should not be used explicity (only to catch errors and such
	|<ENTRY_ANY_RHS_1: "=" <INFO_OPEN> (~["{","}","\""])+ <INFO_CLOSE>  >
	|<ENTRY_ANY_RHS_2: "=" (~["{","}","\""])+ <INFO_CLOSE>  >
	|<ENTRY_ANY_RHS_3: "=" (~["{","}","\""])+  >
	
	//|<ANY_SYMBOLS_ENTRY:(~["{","}","\"","\n","@"])+>
	//|<NOT_OPEN_ITEM: (~["{","@","\n"," "])+ >
	//|<NOT_END_ITEM: (~["}","@","\n"," "])+ >

}


 <STRING_STATE> SKIP :
 {
 	" " | "\t" | "\r" | "\n"
 }
 <STRING_STATE> TOKEN: {
 <STRING_TAG : (["a"-"z","A"-"Z","0"-"9"])+ >
 |<STRING_EQUAL : "="> //= not working ??? ??? ???
// |<STRING_REPLACEMENT: (~["{","}","\""])+ >:DEFAULT 
 |<STRING_OPEN_S: "{" >
 |<STRING_OPEN:"{"|"\""> : A_STRING
 }

 <A_STRING> TOKEN: { <STRING_REPLACEMENT: (~["{","}","\""])+ >:DEFAULT }
 
<ORDER_TOKENS> SKIP :
{
 " " | "\t" | "\r" | "\n"
}
<ORDER_TOKENS> TOKEN: { <ORDER_ENTRY: (["a"-"z","A"-"Z","0"-"9"])+>  :DEFAULT }

//<EXCEPTION_T> TOKEN: {:DEFAULT }//\n serve como eof temporariamente


//START=REFERENCIA
void Start() : {Token t1;}
{
	[Order()]  (Reference()|StringOperatorEntry())+  <EOF>//"\n"//mudar p/ <EOF> + tarde
}

void Order() : {Token t1;}
{
	try {
	<ORDER_SIGN> t1=<ORDER_ENTRY> { order_token = t1.image.toLowerCase(); }
	}
	catch (ParseException e) {
	 System.out.println("Warning:Order TAG badly defined. use ## followed by an entry name;");
	}
}

/*catch (ParseException e) {
	Token taux = getNextToken();
    System.out.println("Item not defined properly\n");// + e.toString());
    Token t;
    /*do {
      t = getNextToken();
    } while (t.kind != ID);*/
	//}

void Reference() : {Token t1; Token t2;}
{
try{
	(<START_ITEM>
	|{//start item missing
	Token taux = getToken(0);
	System.out.println("Warning:Item not opening with '@'. Immediately before line " + taux.beginLine + ",column " +  taux.beginColumn +";");}
	)

  try{
  	(//listing ok
	(t1=<T_ARTICLE> OpenItem(t1)        t2=checkID() {items.add(new Item(t1.image,t2.image));} Article(t1.image,t2.image) )
	|(t1=<T_BOOK> OpenItem(t1)          t2=checkID() {items.add(new Item(t1.image,t2.image));} Book(t1.image,t2.image) )
	|(t1=<T_MANUAL> OpenItem(t1)        t2=checkID() {items.add(new Item(t1.image,t2.image));} Manual(t1.image,t2.image) )
	|(t1=<T_MASTERTHESIS> OpenItem(t1) t2=checkID() {items.add(new Item(t1.image,t2.image));} MasterThesis(t1.image,t2.image)  )
	|(t1=<T_MISC> OpenItem(t1)          t2=checkID() {items.add(new Item(t1.image,t2.image));} Misc(t1.image,t2.image)  )
	|(t1=<T_PHDTHESIS> OpenItem(t1)     t2=checkID() {items.add(new Item(t1.image,t2.image));} PhdThesis(t1.image,t2.image) )
	|(t1=<T_PROCEEDINGS> OpenItem(t1)   t2=checkID() {items.add(new Item(t1.image,t2.image));} Proceedings(t1.image,t2.image)  )
	)//end of listing ok
	}
	catch (ParseException e) {
	Token te = getToken(0);
    System.out.println("Error(Line:" + te.endLine +"|Column:" + te.endColumn +"):Item badly defined;");// + e.toString());
	throw e;
	}

	CloseItem()
	}catch (ParseException e) {
	    Token t;
    do {
      t = getNextToken();
    } while (t.kind != START_ITEM && t.kind != END_ITEM);
	}
}

void OpenItem(Token t1) : {}
{
try{
	<OPEN_ITEM>
	}
catch (ParseException e) {
    System.out.println("Warning:"+t1.image + " not opened at line " + t1.endLine + ", column " + t1.endColumn + ";");// + e.toString());
	}
}

Token checkID() : { Token t1; }
{
	t1=<ID>
	{return t1;}
}


void CloseItem() : {}
{
try{
  <END_ITEM>
  }catch (ParseException e)
  {
	Token taux = getToken(0);
	System.out.println("Warning:Not closing item with '}'. At line " + taux.beginLine + ",column " +  taux.beginColumn +";");
	throw e;
	}
}

void GeneralEntry() : {Token t1;}
{
	try{
	 (t1=<ENTRY_CROSSREF>|t1=<ENTRY_KEYWORDS>|t1=<ENTRY_FILE>
	 |t1=<ENTRY_DOI>|t1=<ENTRY_URL>|t1=<ENTRY_COMMENT>|t1=<ENTRY_OWNER>|t1=<ENTRY_TIMESTAMP>)|t1=<ENTRY_ANNOTATE>
	 {items.get(items.size()-1).addEntry(t1.image); }
	}
	 catch (ParseException e) {throw e;}
}

//= = = = = = = == = = = = = = == = = = == = = == = = = = = == = = = = == = = = = = ==
//ENTRIES PRODUCTIONS
//= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
void Article(String type,String id) : {Token t1;}
{
	<INFO_SEPARATOR> ArticleEntry(type,id) [Article(type,id)]
}
void ArticleEntry(String type,String id) : {Token t1;}
{
try{
(
  t1=<ENTRY_AUTHOR> | t1=<ENTRY_TITLE> | t1=<ENTRY_JOURNAL> | t1=<ENTRY_YEAR> |t1=<ENTRY_VOLUME> | t1=<ENTRY_NUMBER> |
  t1=<ENTRY_PAGES> | t1=<ENTRY_MONTH> | t1=<ENTRY_NOTE> 
  ){items.get(items.size()-1).addEntry(t1.image); }
  | GeneralEntry()
}
	catch (ParseException e) {
	Token te = getToken(1);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"> has an invalid or badly defined entry:" + te.image + ";");
	}
}
//--------------------------------------------------------
void Book(String type,String id) : {Token t1;}
{
	<INFO_SEPARATOR> BookEntry(type,id) [Book(type,id)]
}
void BookEntry(String type,String id):{Token t1;}
{
try{
(
 t1=<ENTRY_AUTHOR> | t1=<ENTRY_TITLE> | t1=<ENTRY_YEAR> | t1=<ENTRY_PUBLISHER> | t1=<ENTRY_EDITOR>
 | t1=<ENTRY_VOLUME> | t1=<ENTRY_NUMBER>
 | t1=<ENTRY_SERIES> |t1=<ENTRY_ADDRESS> |t1=<ENTRY_EDITION>
 | t1=<ENTRY_MONTH> | t1=<ENTRY_NOTE> 
 ) {items.get(items.size()-1).addEntry(t1.image); }
 | GeneralEntry() //{ System.out.println("DEBUG !!!");}
}
	catch (ParseException e) {
	Token te = getToken(1);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"> has an invalid or badly defined entry:" + te.image + ";");
	}
}
//----------------------------------------------------------------
void Booklet(String type,String id) : {Token t1;}
{
	<INFO_SEPARATOR> BookletEntry(type,id) [Booklet(type,id)]
}
void BookletEntry(String type,String id):{Token t1;}
{
try{
(
  t1=<ENTRY_TITLE> | t1=<ENTRY_AUTHOR> | t1=<ENTRY_YEAR> | t1=<ENTRY_ADDRESS> | t1=<ENTRY_HOWPUBLISHED>
 | t1=<ENTRY_NOTE> | t1=<ENTRY_MONTH> 
 ) {items.get(items.size()-1).addEntry(t1.image); }
 | GeneralEntry() //{ System.out.println("DEBUG !!!");}
}
	catch (ParseException e) {
	Token te = getToken(1);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"> has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Conference(String type,String id) : {Token t1;}
{
	<INFO_SEPARATOR> ConferenceEntry(type,id) [Conference(type,id)]
}
void ConferenceEntry(String type,String id):{Token t1;}
{
try{
(
  t1=<ENTRY_TITLE> | t1=<ENTRY_AUTHOR> | t1=<ENTRY_YEAR> | t1=<ENTRY_BOOKTITLE> | 
  t1=<ENTRY_EDITOR>|t1=<ENTRY_VOLUME>|t1=<ENTRY_NUMBER>|t1=<ENTRY_SERIES>|t1=<ENTRY_PAGES>|
  t1=<ENTRY_ADDRESS>|t1=<ENTRY_MONTH>|t1=<ENTRY_ORGANIZATION>|t1=<ENTRY_PUBLISHER>|t1=<ENTRY_NOTE>
 ) {items.get(items.size()-1).addEntry(t1.image); }
 | GeneralEntry() //{ System.out.println("DEBUG !!!");}
}
	catch (ParseException e) {
	Token te = getToken(1);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"> has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Electronic(String type,String id) : {Token t1;}
{
	<INFO_SEPARATOR> ElectronicEntry(type,id) [Electronic(type,id)]
}
void ElectronicEntry(String type,String id):{Token t1;}
{
try{
(
  t1=<ENTRY_AUTHOR>|t1=<ENTRY_MONTH>|t1=<ENTRY_YEAR>|t1=<ENTRY_TITLE>|t1=<ENTRY_LANGUAGE>|
  t1=<ENTRY_HOWPUBLISHED>|t1=<ENTRY_ORGANIZATION>|t1=<ENTRY_ADDRESS>|t1=<ENTRY_NOTE>//|t1=<ENTRY_URL>|
 ) {items.get(items.size()-1).addEntry(t1.image); }
 | GeneralEntry() //{ System.out.println("DEBUG !!!");}
}
	catch (ParseException e) {
	Token te = getToken(1);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"> has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Inbook(String type,String id) : {Token t1;}
{
	<INFO_SEPARATOR> InbookEntry(type,id) [Inbook(type,id)]
}
void InbookEntry(String type,String id):{Token t1;}
{
try{
(
  t1=<ENTRY_CHAPTER>|t1=<ENTRY_PAGES>|t1=<ENTRY_TITLE>|t1=<ENTRY_PUBLISHER>|t1=<ENTRY_YEAR>|t1=<ENTRY_EDITOR>|t1=<ENTRY_AUTHOR>|
  t1=<ENTRY_VOLUME>|t1=<ENTRY_NUMBER>|t1=<ENTRY_SERIES>|t1=<ENTRY_TYPE>|t1=<ENTRY_ADDRESS>|t1=<ENTRY_EDITION>|t1=<ENTRY_MONTH>|t1=<ENTRY_NOTE>
 ) {items.get(items.size()-1).addEntry(t1.image); }
 | GeneralEntry() //{ System.out.println("DEBUG !!!");}
}
	catch (ParseException e) {
	Token te = getToken(1);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"> has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Incollection(String type,String id) : {Token t1;}
{
	<INFO_SEPARATOR> IncollectionEntry(type,id) [Incollection(type,id)]
}
void IncollectionEntry(String type,String id):{Token t1;}
{
try{
(
  t1=<ENTRY_AUTHOR>|t1=<ENTRY_TITLE>|t1=<ENTRY_BOOKTITLE>|t1=<ENTRY_PUBLISHER>|t1=<ENTRY_YEAR>|
  t1=<ENTRY_EDITOR>|t1=<ENTRY_VOLUME>|t1=<ENTRY_NUMBER>|t1=<ENTRY_SERIES>|t1=<ENTRY_TYPE>|
  t1=<ENTRY_CHAPTER>|t1=<ENTRY_PAGES>|t1=<ENTRY_ADDRESS>|t1=<ENTRY_EDITION>|t1=<ENTRY_MONTH>|t1=<ENTRY_NOTE>
 ) {items.get(items.size()-1).addEntry(t1.image); }
 | GeneralEntry() //{ System.out.println("DEBUG !!!");}
}
	catch (ParseException e) {
	Token te = getToken(1);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"> has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Inproceedings(String type,String id) : {Token t1;}
{
	<INFO_SEPARATOR> InproceedingsEntry(type,id) [Inproceedings(type,id)]
}
void InproceedingsEntry(String type,String id):{Token t1;}
{
try{
(
  t1=<ENTRY_AUTHOR>|t1=<ENTRY_TITLE>|t1=<ENTRY_BOOKTITLE>|t1=<ENTRY_YEAR>|
  t1=<ENTRY_EDITOR>|t1=<ENTRY_VOLUME>|t1=<ENTRY_NUMBER>|t1=<ENTRY_SERIES>|t1=<ENTRY_PAGES>|
  t1=<ENTRY_ADDRESS>|t1=<ENTRY_MONTH>|t1=<ENTRY_ORGANIZATION>|t1=<ENTRY_PUBLISHER>|t1=<ENTRY_NOTE>
 ) {items.get(items.size()-1).addEntry(t1.image); }
 | GeneralEntry() //{ System.out.println("DEBUG !!!");}
}
	catch (ParseException e) {
	Token te = getToken(1);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"> has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Manual(String type,String id) : {Token t1;}
{
	<INFO_SEPARATOR> ManualEntry(type,id) [Manual(type,id)]
}
void ManualEntry(String type,String id) :  {Token t1;}
{
try{
(
  t1=<ENTRY_TITLE>  | t1=<ENTRY_AUTHOR> | t1=<ENTRY_ORGANIZATION> | t1=<ENTRY_ADDRESS> | t1=<ENTRY_EDITION> |
                  t1=<ENTRY_MONTH> | t1=<ENTRY_YEAR> | t1=<ENTRY_NOTE>
){items.get(items.size()-1).addEntry(t1.image); }
| GeneralEntry()
}
	catch (ParseException e) {
	Token te = getToken(1);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"> has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void MasterThesis(String type,String id) : {Token t1;}
{
	<INFO_SEPARATOR> MasterThesisEntry(type,id) [MasterThesis(type,id)]
}
void MasterThesisEntry(String type,String id): {Token t1;}
{
try{
(
  t1=<ENTRY_AUTHOR> | t1=<ENTRY_TITLE> | t1=<ENTRY_SCHOOL> | t1=<ENTRY_YEAR>  |t1=<ENTRY_TYPE> | t1=<ENTRY_ADDRESS> |
                       t1=<ENTRY_MONTH> | t1=<ENTRY_NOTE> 
){items.get(items.size()-1).addEntry(t1.image); }
| GeneralEntry()
}
	catch (ParseException e) {
	Token te = getToken(1);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"> has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Misc(String type,String id) : {Token t1;}
{
	<INFO_SEPARATOR> MiscEntry(type,id) [Misc(type,id)]
}
void MiscEntry(String type,String id): {Token t1;}
{
try{
(
  t1=<ENTRY_AUTHOR> | t1=<ENTRY_TITLE> | t1=<ENTRY_HOWPUBLISHED> | t1=<ENTRY_MONTH> | t1=<ENTRY_YEAR> | t1=<ENTRY_NOTE> 
){items.get(items.size()-1).addEntry(t1.image); }
| GeneralEntry()
}
	catch (ParseException e) {
	Token te = getToken(1);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"> has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Other(String type,String id) : {Token t1;}
{
	<INFO_SEPARATOR> OtherEntry(type,id) [Other(type,id)]
}
void OtherEntry(String type,String id):{Token t1;}
{
try{
GeneralEntry() 
}
	catch (ParseException e) {
	Token te = getToken(1);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"> has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Patent(String type,String id) : {Token t1;}
{
	<INFO_SEPARATOR> PatentEntry(type,id) [Patent(type,id)]
}
void PatentEntry(String type,String id):{Token t1;}
{
try{
(
  t1=<ENTRY_NATIONALITY>|t1=<ENTRY_NUMBER>|t1=<ENTRY_YEAR>|t1=<ENTRY_YEARFILED>|
  t1=<ENTRY_AUTHOR>|t1=<ENTRY_TITLE>|t1=<ENTRY_LANGUAGE>|t1=<ENTRY_ASSIGNEE>|t1=<ENTRY_ADDRESS>|
  t1=<ENTRY_TYPE>|t1=<ENTRY_DAY>|t1=<ENTRY_DAYFILED>|t1=<ENTRY_MONTH>|t1=<ENTRY_MONTHFILED>
 ) {items.get(items.size()-1).addEntry(t1.image); }
 | GeneralEntry() //{ System.out.println("DEBUG !!!");}
}
	catch (ParseException e) {
	Token te = getToken(1);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"> has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Periodical(String type,String id) : {Token t1;}
{
	<INFO_SEPARATOR> PeriodicalEntry(type,id) [Periodical(type,id)]
}
void PeriodicalEntry(String type,String id):{Token t1;}
{
try{
(
  t1=<ENTRY_TITLE>|t1=<ENTRY_YEAR>|
  t1=<ENTRY_EDITOR>|t1=<ENTRY_LANGUAGE>|t1=<ENTRY_SERIES>|t1=<ENTRY_VOLUME>|
  t1=<ENTRY_NUMBER>|t1=<ENTRY_ORGANIZATION>|t1=<ENTRY_MONTH>|t1=<ENTRY_NOTE>//|t1=<ENTRY_URL>
 ) {items.get(items.size()-1).addEntry(t1.image); }
 | GeneralEntry() //{ System.out.println("DEBUG !!!");}
}
	catch (ParseException e) {
	Token te = getToken(1);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"> has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void PhdThesis(String type,String id) : {Token t1;}
{
	<INFO_SEPARATOR> PhdThesisEntry(type,id) [PhdThesis(type,id)]
}
void PhdThesisEntry(String type,String id): {Token t1;}
{
try{
(
  t1=<ENTRY_AUTHOR> | t1=<ENTRY_TITLE> | t1=<ENTRY_SCHOOL> | t1=<ENTRY_YEAR> |t1=<ENTRY_TYPE> | t1=<ENTRY_ADDRESS> |
                    t1=<ENTRY_MONTH> | t1=<ENTRY_NOTE>
){items.get(items.size()-1).addEntry(t1.image); }
| GeneralEntry()
}
	catch (ParseException e) {
	Token te = getToken(1);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"> has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Proceedings(String type,String id) : {Token t1;}
{
	<INFO_SEPARATOR> ProceedingsEntry(type,id) [Proceedings(type,id)]
}
void ProceedingsEntry(String type,String id): {Token t1;}
{
try{
(
 t1=<ENTRY_TITLE> | t1=<ENTRY_BOOKTITLE> | t1=<ENTRY_EDITOR> | t1=<ENTRY_VOLUME> | t1=<ENTRY_NUMBER> |
 t1=<ENTRY_SERIES> | t1=<ENTRY_ADDRESS> | t1=<ENTRY_MONTH> | t1=<ENTRY_ORGANIZATION> | t1=<ENTRY_PUBLISHER> 
 | t1=<ENTRY_NOTE> | t1=<ENTRY_YEAR> 

){items.get(items.size()-1).addEntry(t1.image); }
| GeneralEntry()
}
	catch (ParseException e) {
	Token te = getToken(1);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"> has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Standard(String type,String id) : {Token t1;}
{
	<INFO_SEPARATOR> StandardEntry(type,id) [Standard(type,id)]
}
void StandardEntry(String type,String id):{Token t1;}
{
try{
(
  t1=<ENTRY_TITLE>|t1=<ENTRY_ORGANIZATION>|t1=<ENTRY_INSTITUTION>|
  t1=<ENTRY_AUTHOR>|t1=<ENTRY_LANGUAGE>|t1=<ENTRY_HOWPUBLISHED>|t1=<ENTRY_TYPE>|t1=<ENTRY_NUMBER>|
  t1=<ENTRY_REVISION>|t1=<ENTRY_ADDRESS>|t1=<ENTRY_MONTH>|t1=<ENTRY_YEAR>|t1=<ENTRY_NOTE>//|t1=<ENTRY_URL>
 ) {items.get(items.size()-1).addEntry(t1.image); }
 | GeneralEntry() //{ System.out.println("DEBUG !!!");}
}
	catch (ParseException e) {
	Token te = getToken(1);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"> has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Techreport(String type,String id) : {Token t1;}
{
	<INFO_SEPARATOR> TechreportEntry(type,id) [Techreport(type,id)]
}
void TechreportEntry(String type,String id):{Token t1;}
{
try{
(
  t1=<ENTRY_AUTHOR>| t1=<ENTRY_TITLE>| t1=<ENTRY_INSTITUTION>| t1=<ENTRY_YEAR>|
   t1=<ENTRY_TYPE>| t1=<ENTRY_NUMBER>| t1=<ENTRY_ADDRESS>| t1=<ENTRY_MONTH>| t1=<ENTRY_NOTE>
 ) {items.get(items.size()-1).addEntry(t1.image); }
 | GeneralEntry() //{ System.out.println("DEBUG !!!");}
}
	catch (ParseException e) {
	Token te = getToken(1);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"> has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Unpublished(String type,String id) : {Token t1;}
{
	<INFO_SEPARATOR> UnpublishedEntry(type,id) [Unpublished(type,id)]
}
void UnpublishedEntry(String type,String id):{Token t1;}
{
try{
(
  t1=<ENTRY_AUTHOR>|  t1=<ENTRY_TITLE>|  t1=<ENTRY_NOTE>|
    t1=<ENTRY_YEAR>|  t1=<ENTRY_MONTH>
 ) {items.get(items.size()-1).addEntry(t1.image); }
 | GeneralEntry() //{ System.out.println("DEBUG !!!");}
}
	catch (ParseException e) {
	Token te = getToken(1);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"> has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
//==============================================================================
//@string stuff/*
void OpenStringOperatorEntry(Token t0) : {}
{
try{
	t0=<STRING_OPEN_S>
	}
catch (ParseException e) {
    System.out.println("Warning: @string not opened at line " + t0.endLine+";");// + e.toString());
	}
}
 void StringOperatorEntry() : {Token t0; Token t1; Token t2;}
 {
	 t0=<T_STRING_STATE>
	 OpenStringOperatorEntry(t0)
	 try{
  t1=<STRING_TAG> 
  <STRING_EQUAL>
  <STRING_OPEN>
  t2=<STRING_REPLACEMENT> { Item.subs.add(t1.image,t2.image); }
  //System.out.println("debug str:" + t1.image + "---" + t2.image);}
	 }
	 catch (ParseException e) {
		 System.out.println(e.toString());
		  System.out.println("Error(Line:"+ t0.endLine + "|Column:"+ t0.endColumn +"): @string is badly defined;");
	 }

	 try{
	 CloseItem()
	}catch (ParseException e) {
	    Token t;
    do {
      t = getNextToken();
    } while (t.kind != START_ITEM && t.kind != END_ITEM);
	}
	 
 }