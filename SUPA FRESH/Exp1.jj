//options
//{
//  LOOKAHEAD=1;
//}

PARSER_BEGIN(Exp1)
import java.util.Comparator;
import java.io.InputStream;
import java.util.Scanner;
// código Java que invoca o parser
public class Exp1 {


static String order_token;
static boolean ocurred_error_inside_item_during_parsing=false;//what it says...

static String auxInfoBuilder="";

public static void main(String args[]) throws ParseException {

//= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
//inicializaçao da lista de Item.items a ser guardados
Item.items = new java.util.ArrayList<Item>();

if (Item.subs==null) Item.subs = new StringOperator();
order_token="";
//= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
//send stuff to parser
//receber do teclado
//String input = readFile("test.txt", StandardCharsets.UTF_8);
try{
System.out.print("Enter the file name:");
Scanner userInput = new Scanner(System.in);
String location = userInput.next();
java.io.InputStream input = new java.io.FileInputStream(location);
Exp1 parser = new Exp1(input);//System.in);
System.out.println("___________________________________________________");
System.out.println("- - - - - - - - - - - - - - - - - - - - - - - - - -");
System.out.println("notifications format -> type (Line|Column): description");
System.out.println("- - - - - - - - - - - - - - - - - - - - - - - - - -");
try{
parser.Start();
}catch(ParseException e){}
}catch(Exception e){ System.out.println("FAILED TO READ FILE"); return; }
//= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
//check semantics
System.out.println("___________________________________________________");
System.out.println("- - - - - - - - - - - - - - - - - - - - - - - - - -");
System.out.println("The compiler will try to discard errors mentioned above and compile the rest");
System.out.println("The warnings and errors below are relative to the parts that were not discarded");
System.out.println("---------------------------------------------------");
for(int i = 0; i<Item.items.size(); i++)
{
	Item it = Item.items.get(i);
		
	//check item's entries
	int problemsFound=Item.items.get(i).validateItem();
		
	int occur=1;//how many times the same id is found
	boolean missing=true;//if crossre is missing

	String cref = it.getEntry("crossref");
	//*debug*/System.out.println("----" + cref);
	if (!cref.equals("?"))
	{
		
	for(int j = 0; j<Item.items.size(); j++){
		//check if crossref item exists
		if ( Item.items.get(j).id.equals(cref))
		{
			//Item.items.get(i).crossref = Item.items.get(j);
			missing=false;
		}
		if(j>i)//check Item.items with same id
		{
			if(Item.items.get(j).id.equals(it.id) ) 
			{
				occur++;
				Item.items.remove(j);
				j--;
			}
		}	
	}	
	
	if (missing) System.out.println("Warning: In item <" + Item.items.get(i).id +"> was not found the given crossreference <"+ cref +">");
	}
	else for(int j = i+1; j<Item.items.size(); j++){//check Item.items with same id
			if(Item.items.get(j).id.equals(it.id) ) 
			{
				occur++;
				Item.items.remove(j);
				j--;
			}		
		}
	if(occur>1) 
	{
		problemsFound++;
		System.out.println("Error:Item <" + it.id + "> as " + occur + " definitions. The compiler will only take into account the first occurrence."  ) ;
	}
		if ( problemsFound>0) 
			System.out.println("Item <" + Item.items.get(i).id +"> has "+ problemsFound +" problems"); 
	
} 
Item.subs.show_warnings();
//= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
//order stuff
	System.out.println("___________________________________________________");
	System.out.println("- - - - - - - - - - - - - - - - - - - - - - - - - -");
System.out.print("OPTIONAL:\nIf you wish order raw data by an entry digit the entry name in lowercase.\nIf not digit something else.");
Scanner orderScanner = new Scanner(System.in);
String order_token = orderScanner.next();
if (order_token.equals(	"article"		)||
	order_token.equals(	"book"		)||
	order_token.equals(	"booklet"		)||
	order_token.equals(	"conference"	)||
	order_token.equals(	"electronic"	)||
	order_token.equals(	"inbook"		)||
	order_token.equals(	"incollection")||
	order_token.equals(	"inproceeding")||
	order_token.equals(	"manual"		)||
	order_token.equals(	"masterthesis")||
	order_token.equals(	"misc"		)||
	order_token.equals(	"other"		)||
	order_token.equals(	"patent"		)||
	order_token.equals(	"periodical"	)||
	order_token.equals(	"phdthesis"	)||
	order_token.equals(	"proceedings"	)||
	order_token.equals(	"standard"	)||
	order_token.equals(	"techreport"	)||
	order_token.equals(	"unpublished")
) java.util.Collections.sort(Item.items, new ItemComparator(order_token));
//= = = = = = = = = = = = = = = = =  = = = = = = = = = = = = = = = = = =
//export 2 file
	//try{
	System.out.println("___________________________________________________");
	System.out.println("- - - - - - - - - - - - - - - - - - - - - - - - - -");
	//java.io.PrintWriter out = new java.io.PrintWriter("biblio.html");

	System.out.print("Enter the name of the output folder:");
	Scanner outputScanner = new Scanner(System.in);
	String foldername = outputScanner.next();
	
	boolean success = (new java.io.File("../"+foldername)).mkdirs();
	if (!success) {
   System.out.println("FAILED 2 CREATE OUTPUT FOLDER");
   return ;
	}
	
	//java.io.PrintWriter out = new java.io.PrintWriter("../" + foldername+"/raw.html");
	Item.create_n_open_files(foldername);
	
	/*out.println("<!DOCTYPE html>");
	out.println("<html>");
	out.println("<body>\n");*/
	
	for(int i = 0; i<Item.items.size(); i++)
	{
		//export item to output file
		Item.items.get(i).save2HTML(i);
		// /*debug:*/System.out.println(Item.items.get(i).id);
	}
	/*out.println("</body>\n");
	out.println("</html>");
	out.close();*/
	
	Item.close_files();
	
	System.out.println("SUCCESSFULY CREATED OUTPUT FILE");
	//}catch(Exception e) {
	//System.out.println("FAILED 2 CREATE OUTPUT FILE");
	//}
}
}
PARSER_END(Exp1)

TOKEN_MGR_DECLS : {
	private static int bracketsDepth=0;
}


// símbolos que não devem ser considerados na análise
SKIP :
{
 " " | "\t" | "\r" | "\n"
}
// definição dos tokens (símbolos terminais)
TOKEN:
{
	//<ORDER_SIGN: "##" >:ORDER_TOKENS

	//===========================================
	//DEFINIR TIPOS
	//===========================================
	<T_ARTICLE:("a"|"A")("r"|"R")("t"|"T")("i"|"I")("c"|"C")("l"|"L")("e"|"E")>
	|<T_INBOOK:("i"|"I")("n"|"N")("b"|"B")("o"|"O")("o"|"O")("k"|"K")>
	|<T_BOOK:("b"|"B")("o"|"O")("o"|"O")("k"|"K")>
	|<T_BOOKLET:("b"|"B")("o"|"O")("o"|"O")("k"|"K")("l"|"L")("e"|"E")("t"|"T")>
	|<T_CONFERENCE:("c"|"C")("o"|"O")("n"|"N")("f"|"F")("e"|"E")("r"|"R")("e"|"E")("n"|"N")("c"|"C")("e"|"E")>
	|<T_ELECTRONIC:("e"|"E")("l"|"L")("e"|"E")("c"|"C")("t"|"T")("r"|"R")("o"|"O")("n"|"N")("i"|"I")("c"|"C")>
	|<T_INCOLLECTION:("i"|"I")("n"|"N")("c"|"C")("o"|"O")("l"|"L")("l"|"L")("e"|"E")("c"|"C")("t"|"T")("i"|"I")("o"|"O")("n"|"N")>
	|<T_INPROCEEDINGS:("i"|"I")("n"|"N")("p"|"P")("r"|"R")("o"|"O")("c"|"C")("e"|"E")("e"|"E")("d"|"D")("i"|"I")("n"|"N")("g"|"G")("s"|"S")>
	|<T_MANUAL:("m"|"M")("a"|"A")("n"|"N")("u"|"U")("a"|"A")("l"|"L")>
	|<T_MASTERTHESIS:("m"|"M")("a"|"A")("s"|"S")("t"|"T")("e"|"E")("r"|"R")("t"|"T")("h"|"H")("e"|"E")("s"|"S")("i"|"I")("s"|"S")>
	|<T_MISC:("m"|"M")("i"|"I")("s"|"S")("c"|"C")>
	|<T_OTHER:("o"|"O")("t"|"T")("h"|"H")("e"|"E")("r"|"R")>
	|<T_PATENT:("p"|"P")("a"|"A")("t"|"T")("e"|"E")("n"|"N")("t"|"T")>
	|<T_PERIODICAL:("p"|"P")("e"|"E")("r"|"R")("i"|"I")("o"|"O")("d"|"D")("i"|"I")("c"|"C")("a"|"A")("l"|"L")>
	|<T_PHDTHESIS:("p"|"P")("h"|"H")("d"|"D")("t"|"T")("h"|"H")("e"|"E")("s"|"S")("i"|"I")("s"|"S")>
	|<T_PROCEEDINGS:("p"|"P")("r"|"R")("o"|"O")("c"|"C")("e"|"E")("e"|"E")("d"|"D")("i"|"I")("n"|"N")("g"|"G")("s"|"S")>
	|<T_STANDARD:("s"|"S")("t"|"T")("a"|"A")("n"|"N")("d"|"D")("a"|"A")("r"|"R")("d"|"D")>
	|<T_TECHREPORT:("t"|"T")("e"|"E")("c"|"C")("h"|"H")("r"|"R")("e"|"E")("p"|"P")("o"|"O")("r"|"R")("t"|"T")>
	|<T_UNPUBLISHED:("u"|"U")("n"|"N")("p"|"P")("u"|"U")("b"|"B")("l"|"L")("i"|"I")("s"|"S")("h"|"H")("e"|"E")("d"|"D")>

	|<T_STRING_STATE:("@")("s"|"S")("t"|"T")("r"|"R")("i"|"I")("n"|"N")("g"|"G") >: STRING_STATE


	//===========================================
	//ENTRIES
	//===========================================
	/*
	NOTES:
	NOW USING ~["{","}","\""])+ IN ALL TYPES SINCE 
	>NO WARNINGS WERE SENT,
	>ITS ACEPTABLE IN BIBTEC BY DEFAULT
	>IS NEEDED FOR @STRING SUBTITUTION
	(YES COUD MAKE A SUBTOKEN NOW BUT NOT RLY IMPORTANT CAUSE CPY PASTE ALSO WORKS)
	(NOT SURE HOW TO INCLUDE NUMS THERE =/)
	*/


	//===========================================
	//DEFINIÇOES BASICAS
	//===========================================


	|<START_ITEM: "@" >
	|<OPEN_ITEM: "{" >:ITEM_STATE

	
	|<NOT_OPEN_ITEM: ~["@"]>

}


 <ITEM_STATE> SKIP :
 {
 	" " | "\t" | "\r" | "\n"
 }
<ITEM_STATE> TOKEN: {	
	//===========================================
	//GENERAL ENTRIES
	//===========================================
	//<ENTRY_CROSSREF>|<ENTRY_KEYWORDS>|<ENTRY_FILE>|<ENTRY_DOI>|<ENTRY_URL>|<ENTRY_COMMENT>|<ENTRY_OWNER>|<ENTRY_TIMESTAMP>
<CROSSREF:("c"|"C")("r"|"R")("o"|"O")("s"|"S")("s"|"S")("r"|"R")("e"|"E")("f"|"F")>
|<KEYWORDS:("k"|"K")("e"|"E")("y"|"Y")("w"|"W")("o"|"O")("r"|"R")("d"|"D")("s"|"S")>
|<FILE:("f"|"F")("i"|"I")("l"|"L")("e"|"E")>
|<DOI:("d"|"D")("o"|"O")("i"|"I")>
|<URL:("u"|"U")("r"|"R")("l"|"L")>
|<COMMENT:("c"|"C")("o"|"O")("m"|"M")("m"|"M")("e"|"E")("n"|"N")("t"|"T")>
|<OWNER:("o"|"O")("w"|"W")("n"|"N")("e"|"E")("r"|"R")>
|<TIMESTAMP:("t"|"T")("i"|"I")("m"|"M")("e"|"E")("s"|"S")("t"|"T")("a"|"A")("m"|"M")("p"|"P")>
//= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =  = = = = == = = = = = = = = =
|<ABSTRACT:("a"|"A")("b"|"B")("s"|"S")("t"|"T")("r"|"R")("a"|"A")("c"|"C")("t"|"T")>
|<REVIEW:("r"|"R")("e"|"E")("v"|"V")("i"|"I")("e"|"E")("w"|"W")>
|<ANNOTATE:("a"|"A")("n"|"N")("n"|"N")("o"|"O")("t"|"T")("a"|"A")("t"|"T")("e"|"E")>
|<AUTHOR: ("a"|"A")("u"|"U")("t"|"T")("h"|"H")("o"|"O")("r"|"R") >
|<TITLE:("t"|"T")("i"|"I")("t"|"T")("l"|"L")("e"|"E")>
|<PUBLISHER:("p"|"P")("u"|"U")("b"|"B")("l"|"L")("i"|"I")("s"|"S")("h"|"H")("e"|"E")("r"|"R")>
|<VOLUME:("v"|"V")("o"|"O")("l"|"L")("u"|"U")("m"|"M")("e"|"E")>
|<NUMBER:("n"|"N")("u"|"U")("m"|"M")("b"|"B")("e"|"E")("r"|"R")>
|<SERIES:("s"|"S")("e"|"E")("r"|"R")("i"|"I")("e"|"E")("s"|"S")>
|<ADDRESS:("a"|"A")("d"|"D")("d"|"D")("r"|"R")("e"|"E")("s"|"S")("s"|"S")>
|<EDITION:("e"|"E")("d"|"D")("i"|"I")("t"|"T")("i"|"I")("o"|"O")("n"|"N")>
|<NOTE:("n"|"N")("o"|"O")("t"|"T")("e"|"E")>
|<PAGES:("p"|"P")("a"|"A")("g"|"G")("e"|"E")("s"|"S")>
|<JOURNAL:("j"|"J")("o"|"O")("u"|"U")("r"|"R")("n"|"N")("a"|"A")("l"|"L")>
|<ORGANIZATION:("o"|"O")("r"|"R")("g"|"G")("a"|"A")("n"|"N")("i"|"I")("z"|"Z")("a"|"A")("t"|"T")("i"|"I")("o"|"O")("n"|"N")>
|<BOOKTITLE:("b"|"B")("o"|"O")("o"|"O")("k"|"K")("t"|"T")("i"|"I")("t"|"T")("l"|"L")("e"|"E")>
|<EDITOR:("e"|"E")("d"|"D")("i"|"I")("t"|"T")("o"|"O")("r"|"R")>
|<SCHOOL:("s"|"S")("c"|"C")("h"|"H")("o"|"O")("o"|"O")("l"|"L")>
|<TYPE:("t"|"T")("y"|"Y")("p"|"P")("e"|"E")>
|<HOWPUBLISHED:("h"|"H")("o"|"O")("w"|"W")("p"|"P")("u"|"U")("b"|"B")("l"|"L")("i"|"I")("s"|"S")("h"|"H")("e"|"E")("d"|"D")>
|<LANGUAGE:("l"|"L")("a"|"A")("n"|"N")("g"|"G")("u"|"U")("a"|"A")("g"|"G")("e"|"E")>
|<CHAPTER:("c"|"C")("h"|"H")("a"|"A")("p"|"P")("t"|"T")("e"|"E")("r"|"R")>
|<NATIONALITY:("n"|"N")("a"|"A")("t"|"T")("i"|"I")("o"|"O")("n"|"N")("a"|"A")("l"|"L")("i"|"I")("t"|"T")("y"|"Y")>
|<ASSIGNEE:("a"|"A")("s"|"S")("s"|"S")("i"|"I")("g"|"G")("n"|"N")("e"|"E")("e"|"E")>
|<INSTITUTION:("i"|"I")("n"|"N")("s"|"S")("t"|"T")("i"|"I")("t"|"T")("u"|"U")("t"|"T")("i"|"I")("o"|"O")("n"|"N")>
|<REVISION:("r"|"R")("e"|"E")("v"|"V")("i"|"I")("s"|"S")("i"|"I")("o"|"O")("n"|"N")>
|<YEAR:("y"|"Y")("e"|"E")("a"|"A")("r"|"R")>
|<YEARFILED:("y"|"Y")("e"|"E")("a"|"A")("r"|"R")("f"|"F")("i"|"I")("l"|"L")("e"|"E")("d"|"D")>
|<MONTH:("m"|"M")("o"|"O")("n"|"N")("t"|"T")("h"|"H")>
|<MONTHFILED:("m"|"M")("o"|"O")("n"|"N")("t"|"T")("h"|"H")("f"|"F")("i"|"I")("l"|"L")("e"|"E")("d"|"D")>
|<DAYFILED:("d"|"D")("a"|"A")("y"|"Y")("f"|"F")("i"|"I")("l"|"L")("e"|"E")("d"|"D")>
|<DAY:("d"|"D")("a"|"A")("y"|"Y")>	
	
	|<ID: (["a"-"z","A"-"Z","0"-"9","_"])+>
	
	|<INFO_SEPARATOR: "," >
	
	|<ENTRY_EQUAL_O : "="> :INFO_ENTRY_STATE_OTHER
	|<ENTRY_EQUAL_B : "={">{bracketsDepth=0;}:INFO_ENTRY_STATE_BRACKETS
	|<ENTRY_EQUAL_A : "=\""> :INFO_ENTRY_STATE_ASPS
	|<END_ITEM: "}" >:DEFAULT//or INFOCLOSE2
	|<ITEM_STATE_BACK_DEFAULT: "" >:DEFAULT
}


 <STRING_STATE> SKIP :
 {
 	" " | "\t" | "\r" | "\n"
 }
 <STRING_STATE> TOKEN: {
 <STRING_TAG : ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","0"-"9"])* >:ITEM_STATE
 //|<STRING_EQUAL_O : "="> :INFO_ENTRY_STATE_OTHER
 //|<STRING_EQUAL_B : "={"> :INFO_ENTRY_STATE_BRACKETS
 //|<STRING_EQUAL_A : "=\""> :INFO_ENTRY_STATE_ASPS
 |<STRING_OPEN_S: "{" >
 |<STRING_STATE_NONE: ~[]> :ITEM_STATE 
 }


<INFO_ENTRY_STATE_BRACKETS> SKIP :
{
 " " | "\t" | "\r" | "\n"
}
<INFO_ENTRY_STATE_BRACKETS> TOKEN:{//ASPS FREE
<INFO1_ITALIC: "\\" "textit" >
|<INFO1_BOLD: "\\" "textbf" >
|<INFO1_UNDERLINE: "\\" "underline" >
|<INFO1_OPEN_BRACKET: "{" >{bracketsDepth++;}//first open is not counted due 2 being in another state so... beware
|<INFO1_CLOSE_BRACKET: "}" >{bracketsDepth --; if(bracketsDepth<0) {  SwitchTo(ITEM_STATE);} }
//|<INFO1_OC_ASPS: "\"" >
|<INFO1_BODY_B: (~["}","{","\\"]|<INFO1_SYMBOLS>)+ > //allows asps freely
|<#INFO1_SYMBOLS: 
("{\"}")
|("\\" "´a")
 |("\\" "'a")
 |("\\" "~a") 
 |("\\" "^a")
 |("\\" "'e")
 |("\\" "^e")
 |("\\" "´{" "\\" "i}")
 |("\\" "´I")
 |("\\" "´o")
 |("\\" "~o")
 |("\\" "^o")
 |("\\" "´u")
 |("\\" "\"u")
 |("\\" "c{c}") 
 |("\\" "c{C}")
 //not using \\ fr new lines, does not make much sense in this context
 >
//|<INFO_ENTRY1:"\"" ((~["{","}","\""])|"{\"}")+ "\"" >:DEFAULT 
//|<INFO_ENTRY2:"{" (~["{","}"])+ "}" >:DEFAULT
//|<INFO_ENTRY_NONE: ~[] >:DEFAULT
|<INFO_BACK_DEFAULT: "" >:ITEM_STATE
 }

 <INFO_ENTRY_STATE_ASPS> SKIP :
{
 " " | "\t" | "\r" | "\n"
}
<INFO_ENTRY_STATE_ASPS> TOKEN:{
<INFO2_ITALIC: "\\" "" "textit" >
|<INFO2_BOLD: "\\" "" "textbf" >
|<INFO2_UNDERLINE: "\\" "" "underline" >
|<INFO2_OPEN_BRACKET: "{" >
|<INFO2_CLOSE_BRACKET: "}" >
|<INFO2_OC_ASPS: "\"" >:ITEM_STATE
|<INFO2_BODY_A: (~["}","{","\"","\\"]|<INFO2_SYMBOLS>)+ >
|<#INFO2_SYMBOLS: 
("{\"}")
|("\\" "´a")
 |("\\" "'a")
 |("\\" "~a") 
 |("\\" "^a")
 |("\\" "'e")
 |("\\" "^e")
 |("\\" "´{" "\\" "i}")
 |("\\" "´I")
 |("\\" "´o")
 |("\\" "~o")
 |("\\" "^o")
 |("\\" "´u")
 |("\\" "\"u")
 |("\\" "c{c}") 
 |("\\" "c{C}")
 //not using \\ fr new lines, does not make much sense in this context
 >
|<INFO2_BACK_DEFAULT: "" >:ITEM_STATE
}

 <INFO_ENTRY_STATE_OTHER> SKIP :
{
 " " | "\t" | "\r" | "\n"
}
<INFO_ENTRY_STATE_OTHER> TOKEN:{
<INFO_STRING_TAG: (["a"-"z","A"-"Z"]|"_") (["a"-"z","A"-"Z","0"-"9"]|"_")*>
|<INFO_ENTRY_NUM: (["0"-"9"])+ >:ITEM_STATE
|<INFO0_BACK_DEFAULT: "" >:ITEM_STATE
}
 
//START=REFERENCIA
void Start() : {Token t1;}
{
	/*[Order()]*/  
	(StringOperatorEntry()
	|Reference()
	|NoItem()
	)+
	<EOF>
}

void NoItem() : {}
{
	<NOT_OPEN_ITEM> { 

	Token ts = getToken(0);
	//Token te = getToken(0);
	Token tn = getToken(1);
	  while (tn.kind != START_ITEM && tn.kind !=T_STRING_STATE &&tn.kind!=EOF) {
    /* te=*/getNextToken(); tn = getToken(1);
	  }
	  //if(tn.kind==START_ITEM)
	System.out.println("Error:Text outside an item from (" + ts.beginLine + "|" +  ts.beginColumn +") to (" +tn.beginLine + "|" +  tn.beginColumn + ") will be ignored;");
	
	}
}


void Reference() : {Token t1; Token t2;}
{
	//*debug*/{  System.out.println("started @item");}
	
//try{
	//[(<START_ITEM>)]
	try{
	(<START_ITEM>) 
	}catch (ParseException e){
	Token taux = getToken(0);
	System.out.println("Warning:Item not opening with '@'. At line " + taux.beginLine + ",column " +  taux.beginColumn +";");
	}
	

  try{
  	(//listing ok
	(t1=<T_ARTICLE> OpenItem(t1)    	    	t2=checkID() {Item.items.add(new Item(t1.image,t2.image));} Article(t1.image,t2.image) )
	|(t1=<T_BOOK> OpenItem(t1)    	    	  	t2=checkID() {Item.items.add(new Item(t1.image,t2.image));} Book(t1.image,t2.image) )
	|(t1=<T_BOOKLET> OpenItem(t1)          		t2=checkID() {Item.items.add(new Item(t1.image,t2.image));} Booklet(t1.image,t2.image) )
	|(t1=<T_CONFERENCE> OpenItem(t1)			t2=checkID() {Item.items.add(new Item(t1.image,t2.image));} Conference(t1.image,t2.image) )
	|(t1=<T_ELECTRONIC> OpenItem(t1)          	t2=checkID() {Item.items.add(new Item(t1.image,t2.image));} Electronic(t1.image,t2.image) )
	|(t1=<T_INBOOK> OpenItem(t1)    		    t2=checkID() {Item.items.add(new Item(t1.image,t2.image));} Inbook(t1.image,t2.image) )
	|(t1=<T_INCOLLECTION> OpenItem(t1)          t2=checkID() {Item.items.add(new Item(t1.image,t2.image));} Incollection(t1.image,t2.image) )
	|(t1=<T_INPROCEEDINGS> OpenItem(t1)         t2=checkID() {Item.items.add(new Item(t1.image,t2.image));} Inproceedings(t1.image,t2.image) )
	|(t1=<T_MANUAL> OpenItem(t1)      			t2=checkID() {Item.items.add(new Item(t1.image,t2.image));} Manual(t1.image,t2.image) )
	|(t1=<T_MASTERTHESIS> OpenItem(t1)			t2=checkID() {Item.items.add(new Item(t1.image,t2.image));} MasterThesis(t1.image,t2.image)  )
	|(t1=<T_MISC> OpenItem(t1)          		t2=checkID() {Item.items.add(new Item(t1.image,t2.image));} Misc(t1.image,t2.image)  )
	|(t1=<T_OTHER> OpenItem(t1)         		t2=checkID() {Item.items.add(new Item(t1.image,t2.image));} Other(t1.image,t2.image) )
	|(t1=<T_PATENT> OpenItem(t1)        		t2=checkID() {Item.items.add(new Item(t1.image,t2.image));} Patent(t1.image,t2.image) )
	|(t1=<T_PERIODICAL> OpenItem(t1)    		t2=checkID() {Item.items.add(new Item(t1.image,t2.image));} Periodical(t1.image,t2.image) )
	|(t1=<T_PHDTHESIS> OpenItem(t1)     		t2=checkID() {Item.items.add(new Item(t1.image,t2.image));} PhdThesis(t1.image,t2.image) )
	|(t1=<T_PROCEEDINGS> OpenItem(t1)   		t2=checkID() {Item.items.add(new Item(t1.image,t2.image));} Proceedings(t1.image,t2.image)  )
	|(t1=<T_STANDARD> OpenItem(t1)      		t2=checkID() {Item.items.add(new Item(t1.image,t2.image));} Standard(t1.image,t2.image) )
	|(t1=<T_TECHREPORT> OpenItem(t1)    		t2=checkID() {Item.items.add(new Item(t1.image,t2.image));} Techreport(t1.image,t2.image) )
	|(t1=<T_UNPUBLISHED> OpenItem(t1)   		t2=checkID() {Item.items.add(new Item(t1.image,t2.image));} Unpublished(t1.image,t2.image) )
	)//*debug*/ {System.out.println(t1.image +"-deb");}
	//end of listing ok
	}
	catch (ParseException e) {
	Token te = getToken(0);
    System.out.println("Error  (Line:" + te.endLine +"|Column:" + te.endColumn +"):Item badly defined. Check item type name and bibkey;");// + e.toString());	
	
	//throw e;
	}

	CloseItem()
	/*}catch (ParseException e) {
	    Token t;
    do {
      t = getNextToken();
    } while (t.kind != START_ITEM && t.kind != END_ITEM);
	}*/
	//*debug*/{  System.out.println("ended @item");}
}

void OpenItem(Token t1) : {}
{
try{
	<OPEN_ITEM>
	}
catch (ParseException e) {
    System.out.println("Error:"+t1.image + " not properly open at (" + t1.endLine + "|" + t1.endColumn + ") or type written wrongly;");// + e.toString());
	
	/*Token te = getToken(0);
	Token tn = getToken(1);
	  while (te.kind!=OPEN_ITEM && tn.kind != START_ITEM &&tn.kind!=EOF) {
      te = getNextToken(); tn = getToken(1);
	  }
	if(tn.kind==START_ITEM)*/	throw e;
		
	}
}

Token checkID() : { Token t1; }
{
	t1=<ID>
	{return t1;}
}


void CloseItem() : {}
{
try{
  <END_ITEM>
  }catch (ParseException e)
  {
	  Token te = getToken(0); Token tn = getToken(1);
	  while (tn.kind != START_ITEM && tn.kind !=T_STRING_STATE && te.kind != END_ITEM &&tn.kind!=EOF) {
     te=getNextToken(); tn = getToken(1); // //*debug:*/ System.out.println("_"+te.image + "_"+tn.image);
	  }
	  if(te.kind!=END_ITEM)
	System.out.println("Warning("+ te.beginLine+"|"+  te.beginColumn +"):Not closing item with '}' ;");
	
	//throw e;
	}
}


//= = = = = = = == = = = = = = == = = = == = = == = = = = = == = = = = == = = = = = ==
//ENTRIES PRODUCTIONS
//= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
void info(String s1) : {Token t1;} 
{
	{boolean checkequal=false;}
	try{
		{String res="";}
		
		(/*0*/ 
		 
		(/*1*/
		(
		( <ENTRY_EQUAL_A> {checkequal=true;} [t1=<INFO2_BODY_A> {res+=t1.image;}] (specialInfoTYPE_ASPS()	 {res+=auxInfoBuilder;}	[t1=<INFO2_BODY_A> {res+=t1.image;}] )* <INFO2_OC_ASPS> ) 	
		|(<ENTRY_EQUAL_B> {checkequal=true;} [t1=<INFO1_BODY_B> {res+=t1.image;}] (specialInfoTYPE_BRACKETS() {res+=auxInfoBuilder;}	[t1=<INFO1_BODY_B> {res+=t1.image;}] )* <INFO1_CLOSE_BRACKET> )
		//t1=<INFO_ENTRY1>|t1=<INFO_ENTRY2>
		
		) {Item.items.get(Item.items.size()-1).addEntry(s1 + "=" + res  ); } 
		)/*/1*/
		
		/*2*/
		|(<ENTRY_EQUAL_O> {checkequal=true;}
		
		(
		(t1=<INFO_ENTRY_NUM> {Item.items.get(Item.items.size()-1).addEntry(s1 + "=" + t1.image  ); } )
		//substituting @strings this way will only consider @string previously declared
		//which is done by default in LateX. so it's better this way to keep similarities
		|(t1=<INFO_STRING_TAG> {Item.items.get(Item.items.size()-1).addEntry(s1 + "=" + Item.replaceStrings(t1.image,t1.endLine,t1.endColumn) ); } )
		)
		
		)
		/*/2*/
		
		)/*0*/
	}	catch (ParseException e) {
	Token te = getToken(1);
	if(!checkequal) System.out.println("Error  (Line:"+ te.endLine + "|Column:"+ te.endColumn +"): '=' not found;");
    else System.out.println("Error  (Line:"+ te.endLine + "|Column:"+ te.endColumn +"): \"" +te.image+"\" - entry value was badly defined;");
	//*debug*/System.out.println(e.toString());
	}
}

void specialInfoTYPE_BRACKETS() : {Token t1;}
{
	{String result="";String endspecial="";auxInfoBuilder="";}
	
	// - - - - - - - - - - - - - - - - - - -
	( 	
		(
		<INFO1_ITALIC> 		{result+= "<i>"; endspecial="</i>";}
		|<INFO1_BOLD>		{result+= "<b>"; endspecial="</b>";}
		|<INFO1_UNDERLINE>	{result+= "<u>"; endspecial="</u>";}
		)
		
		<INFO1_OPEN_BRACKET> 	
	( 
	[t1=<INFO1_BODY_B> { result += t1.image;}] 				
	[specialInfoTYPE_BRACKETS() { result += auxInfoBuilder;}
		[t1=<INFO1_BODY_B> { result += t1.image;}]
	] 
	)
	)
	
	// - - - - - - - - - - - - - - - - - - -
	/*( <INFO_BOLD> <INFO_OPEN_BRACKET> 	
	( 
	[t1=<INFO1_BODY_B> { result += t1.image;}] 				
	[rec=specialInfoTYPE_BRACKETS() { result += rec;}
		[t1=<INFO1_BODY_B> { result += t1.image;}]			
	]	
	)
	){ result = "<b>" + result + "</b>";}
	// - - - - - - - - - - - - - - - - - - -
	( <INFO_UNDERLINE> <INFO_OPEN_BRACKET> 	
	( 
	[t1=<INFO1_BODY_B> { result += t1.image;}] 				
	[rec=specialInfoTYPE_BRACKETS() { result += rec;}
		[t1=<INFO1_BODY_B> { result += t1.image;}]				
	]
	)
	){ result = "<u>" + result + "</u>";}*/
	//=====================================
	<INFO1_CLOSE_BRACKET> {auxInfoBuilder= result+endspecial;}
}

void specialInfoTYPE_ASPS() : {Token t1;}
{
	{String result="";String endspecial="";auxInfoBuilder="";}
	
	( 	
		(
		<INFO2_ITALIC> 		{result+= "<i>"; endspecial="</i>";}
		|<INFO2_BOLD>		{result+= "<b>"; endspecial="</b>";}
		|<INFO2_UNDERLINE>	{result+= "<u>"; endspecial="</u>";}
		)
		
		<INFO2_OPEN_BRACKET> 	
	( 
	[t1=<INFO2_BODY_A> { result += t1.image;}] 				
	[specialInfoTYPE_ASPS() {result += auxInfoBuilder;}
		[t1=<INFO2_BODY_A> { result += t1.image;}]
	] 
	)
	)

	<INFO2_CLOSE_BRACKET> {auxInfoBuilder= result+endspecial;}
}
//===============================================================================
//GENERAL ENTRY PRODUCTIONS
/*void deadInfo() : {}
{
	try{
	(t1=<INFO_ENTRY1>|t1=<INFO_ENTRY2>) 
		|(t1=<INFO_ENTRY_NUM>) 
		|(t1=<INFO_STRING_TAG>)
	}	catch (ParseException e) {throw e;}
}*/
void entry_not_valid() : {}
{
	{ 
	Token te = getToken(1);
	
	if(te.kind==START_ITEM|| te.kind ==T_STRING_STATE) throw new ParseException("Started new item before closing another");
	
	if(te.image==","|te.image=="}") System.out.println("Warning("+ te.endLine + "|"+ te.endColumn +"): Missing entry.");
    else System.out.println("Error  ("+ te.endLine + "|"+ te.endColumn +"): \"" +te.image+"\" - not a valid Entry;");
	
	/*doing this would not make possible to get possible next entries
    while (te.kind != START_ITEM && te.kind != END_ITEM) {
     getNextToken(); te = getToken(1); //debug System.out.println("_"+t.image + "_"+te.image);
    } */
	
	}
}
//- - - - - - - - - - - - - - - - - - - - - -
void entry_CROSSREF() : {Token t1;} { 
 t1=<CROSSREF>   info(t1.image)  
	}
void entry_KEYWORDS() : {Token t1;} { 
 t1=<KEYWORDS>   info(t1.image)  
	}
void entry_FILE() : {Token t1;} { 
 t1=<FILE>   info(t1.image) 
	}
void entry_DOI() : {Token t1;} { 
 t1=<DOI>   info(t1.image)  
	}
void entry_URL() : {Token t1;} { 
  t1=<URL>   info(t1.image) 
	}
void entry_COMMENT() : {Token t1;} { 
 t1=<COMMENT>   info(t1.image) 
	}
void entry_OWNER() : {Token t1;} { 
 t1=<OWNER>   info(t1.image) 
	}
void entry_TIMESTAMP() : {Token t1;} { 
 t1=<TIMESTAMP>   info(t1.image)  
	}
void entry_ABSTRACT() : {Token t1;} { 
 t1=<ABSTRACT>   info(t1.image)  
	}
void entry_REVIEW() : {Token t1;} { 
 t1=<REVIEW>   info(t1.image)  
	}
void entry_ANNOTATE() : {Token t1;} { 
 t1=<ANNOTATE> info(t1.image)
} // VERIFICAR!!!!!!!!!
//===============================================================================
//ENTRY PRODUCTIONS
void entry_AUTHOR() : {Token t1;} { 
 t1=<AUTHOR>   info(t1.image) 
	}
void entry_TITLE() : {Token t1;} { 
  t1=<TITLE>   info(t1.image)  
	}
void entry_PUBLISHER() : {Token t1;} { 
 t1=<PUBLISHER>   info(t1.image) 
	}
void entry_VOLUME() : {Token t1;} { 
 t1=<VOLUME> info(t1.image) 
	}
void entry_NUMBER() : {Token t1;} { 
 t1=<NUMBER> info(t1.image) 
	}
void entry_SERIES() : {Token t1;} { 
 t1=<SERIES> info(t1.image) 
	}
void entry_ADDRESS() : {Token t1;} { 
 t1=<ADDRESS>   info(t1.image) 
	}
void entry_EDITION() : {Token t1;} { 
 t1=<EDITION> info(t1.image) 
	}
void entry_NOTE() : {Token t1;} { 
 t1=<NOTE>   info(t1.image) 
	}
void entry_PAGES() : {Token t1;} { 
 t1=<PAGES> info(t1.image) 
	}
void entry_JOURNAL() : {Token t1;} { 
 t1=<JOURNAL> info(t1.image) 
	}
void entry_ORGANIZATION() : {Token t1;} { 
 t1=<ORGANIZATION> info(t1.image) 
	}
void entry_BOOKTITLE() : {Token t1;} { 
 t1=<BOOKTITLE>   info(t1.image)  
	}
void entry_EDITOR() : {Token t1;} { 
 t1=<EDITOR>   info(t1.image)  
	}
void entry_SCHOOL() : {Token t1;} { 
 t1=<SCHOOL>   info(t1.image)  
	}
void entry_TYPE() : {Token t1;} { 
 t1=<TYPE>   info(t1.image)  
	}
void entry_HOWPUBLISHED() : {Token t1;} { 
 t1=<HOWPUBLISHED>   info(t1.image)  
	}
void entry_LANGUAGE() : {Token t1;} { 
 t1=<LANGUAGE>   info(t1.image)  
	}
void entry_CHAPTER() : {Token t1;} { 
 t1=<CHAPTER>   info(t1.image)  
	}
void entry_NATIONALITY() : {Token t1;} { 
 t1=<NATIONALITY>   info(t1.image)  
	}
void entry_ASSIGNEE() : {Token t1;} { 
 t1=<ASSIGNEE>   info(t1.image)  
	}
void entry_INSTITUTION() : {Token t1;} { 
 t1=<INSTITUTION>   info(t1.image) 
	}
void entry_REVISION() : {Token t1;} { 
 t1=<REVISION>   info(t1.image) 
	}
void entry_YEAR() : {Token t1;} { 
 t1=<YEAR>   info(t1.image) 
	}
void entry_YEARFILED() : {Token t1;} { 
 t1=<YEARFILED>   info(t1.image)  
	}
void entry_MONTH() : {Token t1;} { 
 t1=<MONTH>   info(t1.image) 
	}
void entry_MONTHFILED() : {Token t1;} { 
 t1=<MONTHFILED>   info(t1.image)  
	}
void entry_DAYFILED() : {Token t1;} { 
 t1=<DAYFILED>   info(t1.image)  
	}
void entry_DAY() : {Token t1;} { 
 t1=<DAY>   info(t1.image)  
}

//============================================================================================
void GeneralEntry() : {}
{
	try{
	 (entry_CROSSREF()|entry_KEYWORDS()|entry_FILE()
	 |entry_DOI()|entry_URL()|entry_COMMENT()|entry_OWNER()|entry_TIMESTAMP()|entry_ANNOTATE()
	 )
	}
	 catch (ParseException e) {throw e;}
}

//= = = = = = = == = = = = = = == = = = == = = == = = = = = == = = = = == = = = = = ==
//ITEM PRODUCTIONS
//= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
void Article(String type,String id) : {}
{
	<INFO_SEPARATOR> ArticleEntry(type,id) [Article(type,id)]
}
void ArticleEntry(String type,String id) : {}
{
try{
(
  entry_AUTHOR() | entry_TITLE() | entry_JOURNAL() | entry_YEAR() |entry_VOLUME() | entry_NUMBER() |
  entry_PAGES() | entry_MONTH() | entry_NOTE() 
  )
  | GeneralEntry()
  |entry_not_valid()
}
	catch (ParseException e) {
	Token te = getToken(0);
    System.out.println("Error  ("+ te.endLine + "|"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"() has an invalid or badly defined entry:" + te.image + ";");
	}
}
//--------------------------------------------------------
void Book(String type,String id) : {}
{
	<INFO_SEPARATOR> BookEntry(type,id) [Book(type,id)]
}
void BookEntry(String type,String id):{}
{
try{
(
 entry_AUTHOR() | entry_TITLE() | entry_YEAR() | entry_PUBLISHER() | entry_EDITOR()
 | entry_VOLUME() | entry_NUMBER()
 | entry_SERIES() |entry_ADDRESS() |entry_EDITION()
 | entry_MONTH() | entry_NOTE() 
 ) 
 | GeneralEntry() //{ System.out.println("DEBUG !!!");}
 |entry_not_valid()
}
	catch (ParseException e) {
	Token te = getToken(0);
	System.out.println(e.toString());
    System.out.println("Error  ("+ te.endLine + "|"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"() has an invalid or badly defined entry:" + te.image + ";");
	}
}
//----------------------------------------------------------------
void Booklet(String type,String id) : {}
{
	<INFO_SEPARATOR> BookletEntry(type,id) [Booklet(type,id)]
}
void BookletEntry(String type,String id):{}
{
try{
(
  entry_TITLE() | entry_AUTHOR() | entry_YEAR() | entry_ADDRESS() | entry_HOWPUBLISHED()
 | entry_NOTE() | entry_MONTH() 
 ) 
 | GeneralEntry() //{ System.out.println("DEBUG !!!");}
}
	catch (ParseException e) {
	Token te = getToken(0);
    System.out.println("Error  ("+ te.endLine + "|"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"() has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Conference(String type,String id) : {}
{
	<INFO_SEPARATOR> ConferenceEntry(type,id) [Conference(type,id)]
}
void ConferenceEntry(String type,String id):{}
{
try{
(
  entry_TITLE() | entry_AUTHOR() | entry_YEAR() | entry_BOOKTITLE() | 
  entry_EDITOR()|entry_VOLUME()|entry_NUMBER()|entry_SERIES()|entry_PAGES()|
  entry_ADDRESS()|entry_MONTH()|entry_ORGANIZATION()|entry_PUBLISHER()|entry_NOTE()
 ) 
 | GeneralEntry() //{ System.out.println("DEBUG !!!");}
  |entry_not_valid()
}
	catch (ParseException e) {
	Token te = getToken(0);
    System.out.println("Error  ("+ te.endLine + "|"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"() has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Electronic(String type,String id) : {}
{
	<INFO_SEPARATOR> ElectronicEntry(type,id) [Electronic(type,id)]
}
void ElectronicEntry(String type,String id):{}
{
try{
(
  entry_AUTHOR()|entry_MONTH()|entry_YEAR()|entry_TITLE()|entry_LANGUAGE()|
  entry_HOWPUBLISHED()|entry_ORGANIZATION()|entry_ADDRESS()|entry_NOTE()//|entry_URL()|
 ) 
 | GeneralEntry() //{ System.out.println("DEBUG !!!");}
  |entry_not_valid()
}
	catch (ParseException e) {
	Token te = getToken(0);
    System.out.println("Error  ("+ te.endLine + "|"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"() has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Inbook(String type,String id) : {}
{
	<INFO_SEPARATOR> InbookEntry(type,id) [Inbook(type,id)]
}
void InbookEntry(String type,String id):{}
{
try{
(
  entry_CHAPTER()|entry_PAGES()|entry_TITLE()|entry_PUBLISHER()|entry_YEAR()|entry_EDITOR()|entry_AUTHOR()|
  entry_VOLUME()|entry_NUMBER()|entry_SERIES()|entry_TYPE()|entry_ADDRESS()|entry_EDITION()|entry_MONTH()|entry_NOTE()
 ) 
 | GeneralEntry() //{ System.out.println("DEBUG !!!");}
  |entry_not_valid()
}
	catch (ParseException e) {
	Token te = getToken(0);
    System.out.println("Error  ("+ te.endLine + "|"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"() has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Incollection(String type,String id) : {}
{
	<INFO_SEPARATOR> IncollectionEntry(type,id) [Incollection(type,id)]
}
void IncollectionEntry(String type,String id):{}
{
try{
(
  entry_AUTHOR()|entry_TITLE()|entry_BOOKTITLE()|entry_PUBLISHER()|entry_YEAR()|
  entry_EDITOR()|entry_VOLUME()|entry_NUMBER()|entry_SERIES()|entry_TYPE()|
  entry_CHAPTER()|entry_PAGES()|entry_ADDRESS()|entry_EDITION()|entry_MONTH()|entry_NOTE()
 ) 
 | GeneralEntry() //{ System.out.println("DEBUG !!!");}
  |entry_not_valid()
}
	catch (ParseException e) {
	Token te = getToken(0);
    System.out.println("Error  ("+ te.endLine + "|"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"() has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Inproceedings(String type,String id) : {}
{
	<INFO_SEPARATOR> InproceedingsEntry(type,id) [Inproceedings(type,id)]
}
void InproceedingsEntry(String type,String id):{}
{
try{
(
  entry_AUTHOR()|entry_TITLE()|entry_BOOKTITLE()|entry_YEAR()|
  entry_EDITOR()|entry_VOLUME()|entry_NUMBER()|entry_SERIES()|entry_PAGES()|
  entry_ADDRESS()|entry_MONTH()|entry_ORGANIZATION()|entry_PUBLISHER()|entry_NOTE()
 ) 
 | GeneralEntry() //{ System.out.println("DEBUG !!!");}
  |entry_not_valid()
}
	catch (ParseException e) {
	Token te = getToken(0);
    System.out.println("Error  ("+ te.endLine + "|"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"() has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Manual(String type,String id) : {}
{
	<INFO_SEPARATOR> ManualEntry(type,id) [Manual(type,id)]
}
void ManualEntry(String type,String id) :  {}
{
try{
(
  entry_TITLE()  | entry_AUTHOR() | entry_ORGANIZATION() | entry_ADDRESS() | entry_EDITION() |
                  entry_MONTH() | entry_YEAR() | entry_NOTE()
)
| GeneralEntry()
 |entry_not_valid()
}
	catch (ParseException e) {
	Token te = getToken(0);
    System.out.println("Error  ("+ te.endLine + "|"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"() has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void MasterThesis(String type,String id) : {}
{
	<INFO_SEPARATOR> MasterThesisEntry(type,id) [MasterThesis(type,id)]
}
void MasterThesisEntry(String type,String id): {}
{
try{
(
  entry_AUTHOR() | entry_TITLE() | entry_SCHOOL() | entry_YEAR()  |entry_TYPE() | entry_ADDRESS() |
                       entry_MONTH() | entry_NOTE() 
)
| GeneralEntry()
 |entry_not_valid()
}
	catch (ParseException e) {
	Token te = getToken(0);
    System.out.println("Error  ("+ te.endLine + "|"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"() has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Misc(String type,String id) : {}
{
	<INFO_SEPARATOR> MiscEntry(type,id) [Misc(type,id)]
}
void MiscEntry(String type,String id): {}
{
try{
(
  entry_AUTHOR() | entry_TITLE() | entry_HOWPUBLISHED() | entry_MONTH() | entry_YEAR() | entry_NOTE() 
)
| GeneralEntry()
 |entry_not_valid()
}
	catch (ParseException e) {
	Token te = getToken(0);
    System.out.println("Error  ("+ te.endLine + "|"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"() has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Other(String type,String id) : {}
{
	<INFO_SEPARATOR> OtherEntry(type,id) [Other(type,id)]
}
void OtherEntry(String type,String id):{}
{
try{
GeneralEntry() 
 |entry_not_valid()
}
	catch (ParseException e) {
	Token te = getToken(0);
    System.out.println("Error  ("+ te.endLine + "|"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"() has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Patent(String type,String id) : {}
{
	<INFO_SEPARATOR> PatentEntry(type,id) [Patent(type,id)]
}
void PatentEntry(String type,String id):{}
{
try{
(
  entry_NATIONALITY()|entry_NUMBER()|entry_YEAR()|entry_YEARFILED()|
  entry_AUTHOR()|entry_TITLE()|entry_LANGUAGE()|entry_ASSIGNEE()|entry_ADDRESS()|
  entry_TYPE()|entry_DAY()|entry_DAYFILED()|entry_MONTH()|entry_MONTHFILED()
 ) 
 | GeneralEntry() //{ System.out.println("DEBUG !!!");}
  |entry_not_valid()
}
	catch (ParseException e) {
	Token te = getToken(0);
    System.out.println("Error  ("+ te.endLine + "|"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"() has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Periodical(String type,String id) : {}
{
	<INFO_SEPARATOR> PeriodicalEntry(type,id) [Periodical(type,id)]
}
void PeriodicalEntry(String type,String id):{}
{
try{
(
  entry_TITLE()|entry_YEAR()|
  entry_EDITOR()|entry_LANGUAGE()|entry_SERIES()|entry_VOLUME()|
  entry_NUMBER()|entry_ORGANIZATION()|entry_MONTH()|entry_NOTE()//|entry_URL()
 ) 
 | GeneralEntry() //{ System.out.println("DEBUG !!!");}
  |entry_not_valid()
}
	catch (ParseException e) {
	Token te = getToken(0);
    System.out.println("Error  ("+ te.endLine + "|"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"() has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void PhdThesis(String type,String id) : {}
{
	<INFO_SEPARATOR> PhdThesisEntry(type,id) [PhdThesis(type,id)]
}
void PhdThesisEntry(String type,String id): {}
{
try{
(
  entry_AUTHOR() | entry_TITLE() | entry_SCHOOL() | entry_YEAR() |entry_TYPE() | entry_ADDRESS() |
                    entry_MONTH() | entry_NOTE()
)
| GeneralEntry()
 |entry_not_valid()
}
	catch (ParseException e) {
	Token te = getToken(0);
    System.out.println("Error  ("+ te.endLine + "|"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"() has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Proceedings(String type,String id) : {}
{
	<INFO_SEPARATOR> ProceedingsEntry(type,id) [Proceedings(type,id)]
}
void ProceedingsEntry(String type,String id): {}
{
try{
(
 entry_TITLE() | entry_BOOKTITLE() | entry_EDITOR() | entry_VOLUME() | entry_NUMBER() |
 entry_SERIES() | entry_ADDRESS() | entry_MONTH() | entry_ORGANIZATION() | entry_PUBLISHER() 
 | entry_NOTE() | entry_YEAR() 

)
| GeneralEntry()
 |entry_not_valid()
}
	catch (ParseException e) {
	Token te = getToken(0);
    System.out.println("Error  ("+ te.endLine + "|"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"() has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Standard(String type,String id) : {}
{
	<INFO_SEPARATOR> StandardEntry(type,id) [Standard(type,id)]
}
void StandardEntry(String type,String id):{}
{
try{
(
  entry_TITLE()|entry_ORGANIZATION()|entry_INSTITUTION()|
  entry_AUTHOR()|entry_LANGUAGE()|entry_HOWPUBLISHED()|entry_TYPE()|entry_NUMBER()|
  entry_REVISION()|entry_ADDRESS()|entry_MONTH()|entry_YEAR()|entry_NOTE()//|entry_URL()
 ) 
 | GeneralEntry() //{ System.out.println("DEBUG !!!");}
  |entry_not_valid()
}
	catch (ParseException e) {
	Token te = getToken(0);
    System.out.println("Error  ("+ te.endLine + "|"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"() has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Techreport(String type,String id) : {}
{
	<INFO_SEPARATOR> TechreportEntry(type,id) [Techreport(type,id)]
}
void TechreportEntry(String type,String id):{}
{
try{
(
  entry_AUTHOR()| entry_TITLE()| entry_INSTITUTION()| entry_YEAR()|
   entry_TYPE()| entry_NUMBER()| entry_ADDRESS()| entry_MONTH()| entry_NOTE()
 ) 
 | GeneralEntry() //{ System.out.println("DEBUG !!!");}
  |entry_not_valid()
}
	catch (ParseException e) {
	Token te = getToken(0);
    System.out.println("Error  ("+ te.endLine + "|"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"() has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Unpublished(String type,String id) : {}
{
	<INFO_SEPARATOR> UnpublishedEntry(type,id) [Unpublished(type,id)]
}
void UnpublishedEntry(String type,String id):{}
{
try{
(
  entry_AUTHOR()|  entry_TITLE()|  entry_NOTE()|
    entry_YEAR()|  entry_MONTH()
 ) 
 | GeneralEntry() //{ System.out.println("DEBUG !!!");}
  |entry_not_valid()
}
	catch (ParseException e) {
	Token te = getToken(0);
    System.out.println("Error  ("+ te.endLine + "|"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"() has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
//==============================================================================
//@string stuff/*
void OpenStringOperatorEntry(Token t0) : {}
{
try{
	t0=<STRING_OPEN_S>
	}
catch (ParseException e) {
    System.out.println("Error: @string not opened at line " + t0.endLine+";");// + e.toString());
	throw e;
	}
}

void StringOperatorEntry() : {Token t0; Token t1; Token t2;}
 {
	 //*debug*/{  System.out.println("started @str");}
		 
	 t0=<T_STRING_STATE>
	 
	 try{
		 
		 OpenStringOperatorEntry(t0)
		 
	 try{
		 (
  t1=<STRING_TAG>
  
    {String res="";}
	
  (
  (<ENTRY_EQUAL_A> [t2=<INFO2_BODY_A> {res+=t2.image;}] [specialInfoTYPE_ASPS() {res+=auxInfoBuilder;}	[t2=<INFO2_BODY_A> {res+=t2.image;}]] <INFO2_OC_ASPS> )
  |(<ENTRY_EQUAL_B> [t2=<INFO1_BODY_B> {res+=t2.image;}] [specialInfoTYPE_BRACKETS() {res+=auxInfoBuilder;} [t2=<INFO1_BODY_B> {res+=t2.image;}]] <INFO1_CLOSE_BRACKET>)
  |(<ENTRY_EQUAL_O> t2=<INFO_ENTRY_NUM> {res+=t2.image;}) 
  ) { Item.subs.add(t1.image,res ); }
  
  )
	 }
	 catch (ParseException e) {
		  System.out.println("Error  ("+ t0.endLine + "|"+ t0.endColumn +"): @string is badly defined;");
	 //*debug*/System.out.println(e.toString());
	 Token te = getToken(1);
	
	if(te.kind==START_ITEM|| te.kind ==T_STRING_STATE) throw new ParseException("Started new item before closing another");
	 }
	 }catch (ParseException e){}
	 
	 
	 CloseItem()
	 
	/*}catch (ParseException e) {
	    Token t,tn=getToken(1);
    while (tn.kind != START_ITEM && tn.kind != EOF && t.kind != END_ITEM) {
      t = getNextToken(); tn=getToken(1);
    } 
	}*/
	//*debug*/{  System.out.println("ended @str");}
 }