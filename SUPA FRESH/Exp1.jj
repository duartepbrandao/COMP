//options
//{
//  LOOKAHEAD=1;
//}

PARSER_BEGIN(Exp1)
import java.util.Comparator;
import java.io.InputStream;
import java.util.Scanner;
// código Java que invoca o parser
public class Exp1 {

static java.util.List<Item> items;
static String order_token;
//static java.util.List<String> crossRef;

public static void main(String args[]) throws ParseException {

//= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
//inicializaçao da lista de items a ser guardados
items = new java.util.ArrayList<Item>();
if (Item.subs==null) Item.subs = new StringOperator();
order_token="";
//= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
//send stuff to parser
//receber do teclado
//String input = readFile("test.txt", StandardCharsets.UTF_8);
try{
	System.out.print("Enter the file name:");
	Scanner userInput = new Scanner(System.in);
	String location = userInput.next();
java.io.InputStream input = new java.io.FileInputStream(location);
Exp1 parser = new Exp1(input);//System.in);
System.out.println("___________________________________________________");
System.out.println("- - - - - - - - - - - - - - - - - - - - - - - - - -");
try{
parser.Start();
}catch(ParseException e){}
}catch(Exception e){ System.out.println("FAILED TO READ FILE"); return; }
//= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
//order stuff
if (order_token!="")//create a token later for ordering stuff
java.util.Collections.sort(items, new ItemComparator(order_token));
//= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
//check semantics
System.out.println("___________________________________________________");
System.out.println("- - - - - - - - - - - - - - - - - - - - - - - - - -");
System.out.println("The compiler will try to discard errors mentioned above and compile the rest");
System.out.println("The warnings and errors below are relative to the parts that where not discarded");
System.out.println("---------------------------------------------------");
for(int i = 0; i<items.size(); i++)
{
	Item it = items.get(i);
		
	//check item's entries
	int problemsFound=items.get(i).validateItem();
		
	int occur=1;//how many times the same id is found
	boolean missing=true;//if crossre is missing

	String cref = it.getEntry("crossref");
	if (!cref.equals("?"))
	{
		
	for(int j = 0; j<items.size(); j++){
		//check if cossrefered item exists
		if ( items.get(j).id.equals(cref))
		{
			items.get(i).crossref = items.get(j);
			missing=false;
		}
		if(j>i)//check items with same id
		{
			if(items.get(j).id.equals(it.id) ) 
			{
				occur++;
				items.remove(j);
				j--;
			}
		}	
	}	
	
	if (missing) System.out.println("Warning: In item <" + items.get(i).id +"> was not found the given crossreference <"+ cref +">");
	}
	else for(int j = i+1; j<items.size(); j++){//check items with same id
			if(items.get(j).id.equals(it.id) ) 
			{
				occur++;
				items.remove(j);
				j--;
			}		
		}
	if(occur>1) 
	{
		problemsFound++;
		System.out.println("Error:Item <" + it.id + "> as " + occur + " definitions. The compiler will only take into account the first occurrence."  ) ;
	}
		if ( problemsFound>0) 
			System.out.println("Item <" + items.get(i).id +"> has "+ problemsFound +" problems"); 
	
}
//= = = = = = = = = = = = = = = = =  = = = = = = = = = = = = = = = = = =
//export 2 file
	try{
	System.out.println("___________________________________________________");
	System.out.println("- - - - - - - - - - - - - - - - - - - - - - - - - -");
	//java.io.PrintWriter out = new java.io.PrintWriter("biblio.html");
	System.out.print("Enter the name of the output file:");
	Scanner outputScanner = new Scanner(System.in);
	String filename = outputScanner.next();
	java.io.PrintWriter out = new java.io.PrintWriter(filename);
	
	
	out.println("<!DOCTYPE html>");
	out.println("<html>");

/*
<head>
  <title>Page Title</title>
</head>
*/
	out.println("<body>\n");
	for(int i = 0; i<items.size(); i++)
	{
		//export item to output file
		items.get(i).save2HTML(out);
		// /*debug:*/System.out.println(items.get(i).id);
	}
	out.println("</body>\n");
	out.println("</html>");
	out.close();
	System.out.println("SUCCESSFULY CREATED OUTPUT FILE");
	}catch(Exception e) {
	System.out.println("FAILED 2 CREATE OUTPUT FILE");
	}
}
}
PARSER_END(Exp1)
// símbolos que não devem ser considerados na análise
SKIP :
{
 " " | "\t" | "\r" | "\n"
}
// definição dos tokens (símbolos terminais)
TOKEN:
{
	<ORDER_SIGN: "##" >:ORDER_TOKENS

	//===========================================
	//DEFINIR TIPOS
	//===========================================
	|<T_ARTICLE:("a"|"A")("r"|"R")("t"|"T")("i"|"I")("c"|"C")("l"|"L")("e"|"E")>
	|<T_BOOK:("b"|"B")("o"|"O")("o"|"O")("k"|"K")>
	|<T_BOOKLET:("b"|"B")("o"|"O")("o"|"O")("k"|"K")("l"|"L")("e"|"E")("t"|"T")>
	|<T_CONFERENCE:("c"|"C")("o"|"O")("n"|"N")("f"|"F")("e"|"E")("r"|"R")("e"|"E")("n"|"N")("c"|"C")("e"|"E")>
	|<T_ELECTRONIC:("e"|"E")("l"|"L")("e"|"E")("c"|"C")("t"|"T")("r"|"R")("o"|"O")("n"|"N")("i"|"I")("c"|"C")>
	|<T_INBOOK:("i"|"I")("n"|"N")("b"|"B")("o"|"O")("o"|"O")("k"|"K")>
	|<T_INCOLLECTION:("i"|"I")("n"|"N")("c"|"C")("o"|"O")("l"|"L")("l"|"L")("e"|"E")("c"|"C")("t"|"T")("i"|"I")("o"|"O")("n"|"N")>
	|<T_INPROCEEDINGS:("i"|"I")("n"|"N")("p"|"P")("r"|"R")("o"|"O")("c"|"C")("e"|"E")("e"|"E")("d"|"D")("i"|"I")("n"|"N")("g"|"G")("s"|"S")>
	|<T_MANUAL:("m"|"M")("a"|"A")("n"|"N")("u"|"U")("a"|"A")("l"|"L")>
	|<T_MASTERTHESIS:("m"|"M")("a"|"A")("s"|"S")("t"|"T")("e"|"E")("r"|"R")("t"|"T")("h"|"H")("e"|"E")("s"|"S")("i"|"I")("s"|"S")>
	|<T_MISC:("m"|"M")("i"|"I")("s"|"S")("c"|"C")>
	|<T_OTHER:("o"|"O")("t"|"T")("h"|"H")("e"|"E")("r"|"R")>
	|<T_PATENT:("p"|"P")("a"|"A")("t"|"T")("e"|"E")("n"|"N")("t"|"T")>
	|<T_PERIODICAL:("p"|"P")("e"|"E")("r"|"R")("i"|"I")("o"|"O")("d"|"D")("i"|"I")("c"|"C")("a"|"A")("l"|"L")>
	|<T_PHDTHESIS:("p"|"P")("h"|"H")("d"|"D")("t"|"T")("h"|"H")("e"|"E")("s"|"S")("i"|"I")("s"|"S")>
	|<T_PROCEEDINGS:("p"|"P")("r"|"R")("o"|"O")("c"|"C")("e"|"E")("e"|"E")("d"|"D")("i"|"I")("n"|"N")("g"|"G")("s"|"S")>
	|<T_STANDARD:("s"|"S")("t"|"T")("a"|"A")("n"|"N")("d"|"D")("a"|"A")("r"|"R")("d"|"D")>
	|<T_TECHREPORT:("t"|"T")("e"|"E")("c"|"C")("h"|"H")("r"|"R")("e"|"E")("p"|"P")("o"|"O")("r"|"R")("t"|"T")>
	|<T_UNPUBLISHED:("u"|"U")("n"|"N")("p"|"P")("u"|"U")("b"|"B")("l"|"L")("i"|"I")("s"|"S")("h"|"H")("e"|"E")("d"|"D")>

	|<T_STRING_STATE:("@")("s"|"S")("t"|"T")("r"|"R")("i"|"I")("n"|"N")("g"|"G") >: STRING_STATE
	//===========================================
	//GENERAL ENTRIES
	//===========================================
	//<ENTRY_CROSSREF>|<ENTRY_KEYWORDS>|<ENTRY_FILE>|<ENTRY_DOI>|<ENTRY_URL>|<ENTRY_COMMENT>|<ENTRY_OWNER>|<ENTRY_TIMESTAMP>
|<CROSSREF:("c"|"C")("r"|"R")("o"|"O")("s"|"S")("s"|"S")("r"|"R")("e"|"E")("f"|"F")>
|<KEYWORDS:("k"|"K")("e"|"E")("y"|"Y")("w"|"W")("o"|"O")("r"|"R")("d"|"D")("s"|"S")>
|<FILE:("f"|"F")("i"|"I")("l"|"L")("e"|"E")>
|<DOI:("d"|"D")("o"|"O")("i"|"I")>
|<URL:("u"|"U")("r"|"R")("l"|"L")>
|<COMMENT:("c"|"C")("o"|"O")("m"|"M")("m"|"M")("e"|"E")("n"|"N")("t"|"T")>
|<OWNER:("o"|"O")("w"|"W")("n"|"N")("e"|"E")("r"|"R")>
|<TIMESTAMP:("t"|"T")("i"|"I")("m"|"M")("e"|"E")("s"|"S")("t"|"T")("a"|"A")("m"|"M")("p"|"P")>
//= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =  = = = = == = = = = = = = = =
|<ABSTRACT:("a"|"A")("b"|"B")("s"|"S")("t"|"T")("r"|"R")("a"|"A")("c"|"C")("t"|"T")>
|<REVIEW:("r"|"R")("e"|"E")("v"|"V")("i"|"I")("e"|"E")("w"|"W")>
|<ANNOTATE:("a"|"A")("n"|"N")("n"|"N")("o"|"O")("t"|"T")("a"|"A")("t"|"T")("e"|"E")>

	//===========================================
	//ENTRIES
	//===========================================
	/*
	NOTES:
	NOW USING ~["{","}","\""])+ IN ALL TYPES SINCE 
	>NO WARNINGS WERE SENT,
	>ITS ACEPTABLE IN BIBTEC BY DEFAULT
	>IS NEEDED FOR @STRING SUBTITUTION
	(YES COUD MAKE A SUBTOKEN NOW BUT NOT RLY IMPORTANT CAUSE CPY PASTE ALSO WORKS)
	(NOT SURE HOW TO INCLUDE NUMS THERE =/)
	*/
|<AUTHOR: ("a"|"A")("u"|"U")("t"|"T")("h"|"H")("o"|"O")("r"|"R") >
|<TITLE:("t"|"T")("i"|"I")("t"|"T")("l"|"L")("e"|"E")>
|<PUBLISHER:("p"|"P")("u"|"U")("b"|"B")("l"|"L")("i"|"I")("s"|"S")("h"|"H")("e"|"E")("r"|"R")>
|<VOLUME:("v"|"V")("o"|"O")("l"|"L")("u"|"U")("m"|"M")("e"|"E")>
|<NUMBER:("n"|"N")("u"|"U")("m"|"M")("b"|"B")("e"|"E")("r"|"R")>
|<SERIES:("s"|"S")("e"|"E")("r"|"R")("i"|"I")("e"|"E")("s"|"S")>
|<ADDRESS:("a"|"A")("d"|"D")("d"|"D")("r"|"R")("e"|"E")("s"|"S")("s"|"S")>
|<EDITION:("e"|"E")("d"|"D")("i"|"I")("t"|"T")("i"|"I")("o"|"O")("n"|"N")>
|<NOTE:("n"|"N")("o"|"O")("t"|"T")("e"|"E")>
|<PAGES:("p"|"P")("a"|"A")("g"|"G")("e"|"E")("s"|"S")>
|<JOURNAL:("j"|"J")("o"|"O")("u"|"U")("r"|"R")("n"|"N")("a"|"A")("l"|"L")>
|<ORGANIZATION:("o"|"O")("r"|"R")("g"|"G")("a"|"A")("n"|"N")("i"|"I")("z"|"Z")("a"|"A")("t"|"T")("i"|"I")("o"|"O")("n"|"N")>
|<BOOKTITLE:("b"|"B")("o"|"O")("o"|"O")("k"|"K")("t"|"T")("i"|"I")("t"|"T")("l"|"L")("e"|"E")>
|<EDITOR:("e"|"E")("d"|"D")("i"|"I")("t"|"T")("o"|"O")("r"|"R")>
|<SCHOOL:("s"|"S")("c"|"C")("h"|"H")("o"|"O")("o"|"O")("l"|"L")>
|<TYPE:("t"|"T")("y"|"Y")("p"|"P")("e"|"E")>
|<HOWPUBLISHED:("h"|"H")("o"|"O")("w"|"W")("p"|"P")("u"|"U")("b"|"B")("l"|"L")("i"|"I")("s"|"S")("h"|"H")("e"|"E")("d"|"D")>
|<LANGUAGE:("l"|"L")("a"|"A")("n"|"N")("g"|"G")("u"|"U")("a"|"A")("g"|"G")("e"|"E")>
|<CHAPTER:("c"|"C")("h"|"H")("a"|"A")("p"|"P")("t"|"T")("e"|"E")("r"|"R")>
|<NATIONALITY:("n"|"N")("a"|"A")("t"|"T")("i"|"I")("o"|"O")("n"|"N")("a"|"A")("l"|"L")("i"|"I")("t"|"T")("y"|"Y")>
|<ASSIGNEE:("a"|"A")("s"|"S")("s"|"S")("i"|"I")("g"|"G")("n"|"N")("e"|"E")("e"|"E")>
|<INSTITUTION:("i"|"I")("n"|"N")("s"|"S")("t"|"T")("i"|"I")("t"|"T")("u"|"U")("t"|"T")("i"|"I")("o"|"O")("n"|"N")>
|<REVISION:("r"|"R")("e"|"E")("v"|"V")("i"|"I")("s"|"S")("i"|"I")("o"|"O")("n"|"N")>
|<YEAR:("y"|"Y")("e"|"E")("a"|"A")("r"|"R")>
|<YEARFILED:("y"|"Y")("e"|"E")("a"|"A")("r"|"R")("f"|"F")("i"|"I")("l"|"L")("e"|"E")("d"|"D")>
|<MONTH:("m"|"M")("o"|"O")("n"|"N")("t"|"T")("h"|"H")>
|<MONTHFILED:("m"|"M")("o"|"O")("n"|"N")("t"|"T")("h"|"H")("f"|"F")("i"|"I")("l"|"L")("e"|"E")("d"|"D")>
|<DAYFILED:("d"|"D")("a"|"A")("y"|"Y")("f"|"F")("i"|"I")("l"|"L")("e"|"E")("d"|"D")>
|<DAY:("d"|"D")("a"|"A")("y"|"Y")>	

	//===========================================
	//DEFINIÇOES BASICAS
	//===========================================
	|<ID: (["a"-"z","A"-"Z","0"-"9"])+>
	|<INFO_SEPARATOR: "," >
	|<ENTRY_ASSIGN_OPERATOR: "=" >:INFO_ENTRY_STATE
	|<START_ITEM: "@" >
	|<OPEN_ITEM: "{" >
	|<END_ITEM: "}" >//or INFOCLOSE2

	//|<INFO_OPEN: "{" | "\"" >
	//|<INFO_CLOSE: "}" | "\"" >

	//should not be used explicity (only to catch errors and such
	//|<ENTRY_ANY_RHS_1: "=" <INFO_OPEN> (~["{","}","\""])+ <INFO_CLOSE>  >
	//|<ENTRY_ANY_RHS_2: "=" (~["{","}","\""])+ <INFO_CLOSE>  >
	//|<ENTRY_ANY_RHS_3: "=" (~["{","}","\""])+  >
	
	//|<ANY_SYMBOLS_ENTRY:(~["{","}","\"","\n","@"])+>
	//|<NOT_OPEN_ITEM: (~["{","@","\n"," "])+ >
	//|<NOT_END_ITEM: (~["}","@","\n"," "])+ >

}


 <STRING_STATE> SKIP :
 {
 	" " | "\t" | "\r" | "\n"
 }
 <STRING_STATE> TOKEN: {
 <STRING_TAG : ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","0"-"9"])* >
 |<STRING_EQUAL : "="> :INFO_ENTRY_STATE//= not working ??? ??? ???
// |<STRING_REPLACEMENT: (~["{","}","\""])+ >:DEFAULT 
 |<STRING_OPEN_S: "{" >
 }

 /*<A_STRING> TOKEN: { //<STRING_REPLACEMENT: (~["{","}","\""])+ >:DEFAULT }
 <STRING_ENTRY1:((~["{","}","\""])|"{\"}")+ "\"">:DEFAULT 
 |<STRING_ENTRY2: (~["{","}"])+ "}">:DEFAULT
 }*/
 
<ORDER_TOKENS> SKIP :
{
 " " | "\t" | "\r" | "\n"
}
<ORDER_TOKENS> TOKEN: { <ORDER_ENTRY: (["a"-"z","A"-"Z","0"-"9"])+>  :DEFAULT }

//<EXCEPTION_T> TOKEN: {:DEFAULT }//\n serve como eof temporariamente

<INFO_ENTRY_STATE> SKIP :
{
 " " | "\t" | "\r" | "\n"
}
<INFO_ENTRY_STATE> TOKEN:{
<INFO_STRING_TAG: ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","0"-"9"])*>:DEFAULT
|<INFO_ENTRY_NUM: (["0"-"9"])+ >:DEFAULT
|<INFO_ENTRY1:"\"" ((~["{","}","\""])|"{\"}")+ "\"" >:DEFAULT 
|<INFO_ENTRY2:"{" (~["{","}"])+ "}" >:DEFAULT
 }

//START=REFERENCIA
void Start() : {Token t1;}
{
	[Order()]  (StringOperatorEntry()|Reference())+  <EOF>//"\n"//mudar p/ <EOF> + tarde
}

void Order() : {Token t1;}
{
	try {
	<ORDER_SIGN> t1=<ORDER_ENTRY> { order_token = t1.image.toLowerCase(); }
	}
	catch (ParseException e) {
	 System.out.println("Warning:Order TAG badly defined. use ## followed by an entry name;");
	}
}

/*catch (ParseException e) {
	Token taux = getNextToken();
    System.out.println("Item not defined properly\n");// + e.toString());
    Token t;
    /*do {
      t = getNextToken();
    } while (t.kind != ID);*/
	//}

void Reference() : {Token t1; Token t2;}
{
try{
	(<START_ITEM>
	|{//start item missing
	Token taux = getToken(0);
	System.out.println("Warning:Item not opening with '@'. Immediately before line " + taux.beginLine + ",column " +  taux.beginColumn +";");}
	)

  try{
  	(//listing ok
	(t1=<T_ARTICLE> OpenItem(t1)        t2=checkID() {items.add(new Item(t1.image,t2.image));} Article(t1.image,t2.image) )
	|(t1=<T_BOOK> OpenItem(t1)          t2=checkID() {items.add(new Item(t1.image,t2.image));} Book(t1.image,t2.image) )
	|(t1=<T_MANUAL> OpenItem(t1)        t2=checkID() {items.add(new Item(t1.image,t2.image));} Manual(t1.image,t2.image) )
	|(t1=<T_MASTERTHESIS> OpenItem(t1) t2=checkID() {items.add(new Item(t1.image,t2.image));} MasterThesis(t1.image,t2.image)  )
	|(t1=<T_MISC> OpenItem(t1)          t2=checkID() {items.add(new Item(t1.image,t2.image));} Misc(t1.image,t2.image)  )
	|(t1=<T_PHDTHESIS> OpenItem(t1)     t2=checkID() {items.add(new Item(t1.image,t2.image));} PhdThesis(t1.image,t2.image) )
	|(t1=<T_PROCEEDINGS> OpenItem(t1)   t2=checkID() {items.add(new Item(t1.image,t2.image));} Proceedings(t1.image,t2.image)  )
	)//end of listing ok
	}
	catch (ParseException e) {
	Token te = getToken(0);
    System.out.println("Error(Line:" + te.endLine +"|Column:" + te.endColumn +"):Item badly defined;");// + e.toString());
	throw e;
	}

	CloseItem()
	}catch (ParseException e) {
	    Token t;
    do {
      t = getNextToken();
    } while (t.kind != START_ITEM && t.kind != END_ITEM);
	}
}

void OpenItem(Token t1) : {}
{
try{
	<OPEN_ITEM>
	}
catch (ParseException e) {
    System.out.println("Warning:"+t1.image + " not opened at line " + t1.endLine + ", column " + t1.endColumn + ";");// + e.toString());
	}
}

Token checkID() : { Token t1; }
{
	t1=<ID>
	{return t1;}
}


void CloseItem() : {}
{
try{
  <END_ITEM>
  }catch (ParseException e)
  {
	Token taux = getToken(0);
	System.out.println("Warning:Not closing item with '}'. At line " + taux.beginLine + ",column " +  taux.beginColumn +";");
	throw e;
	}
}


//= = = = = = = == = = = = = = == = = = == = = == = = = = = == = = = = == = = = = = ==
//ENTRIES PRODUCTIONS
//= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
void info(String s1) : {Token t1;}
{
	try{
		(t1=<INFO_ENTRY1>|t1=<INFO_ENTRY2>) {items.get(items.size()-1).addEntry(s1 + "=" + t1.image); }
		|(t1=<INFO_ENTRY_NUM>) {items.get(items.size()-1).addEntry(s1 + "=\"" + t1.image + "\""); }
		//substituting @strings this way will only consider @string previously declared
		//which is done by default in LateX. so it's better this way to keep similarities
		|(t1=<INFO_STRING_TAG>) {items.get(items.size()-1).addEntry(s1 + "=\"" + Item.replaceStrings(t1.image,t1.endLine,t1.endColumn) + "\""); }
	}	catch (ParseException e) {
	Token te = getToken(1);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +") \"" +te.image+"\":Entry value was badly defined;");
	}
}
//===============================================================================
//GENERAL ENTRY PRODUCTIONS

void entry_CROSSREF() : {Token t1;} { 
 t1=<CROSSREF> <ENTRY_ASSIGN_OPERATOR> info(t1.image)  
	}
void entry_KEYWORDS() : {Token t1;} { 
 t1=<KEYWORDS> <ENTRY_ASSIGN_OPERATOR> info(t1.image)  
	}
void entry_FILE() : {Token t1;} { 
 t1=<FILE> <ENTRY_ASSIGN_OPERATOR> info(t1.image) 
	}
void entry_DOI() : {Token t1;} { 
 t1=<DOI> <ENTRY_ASSIGN_OPERATOR> info(t1.image)  
	}
void entry_URL() : {Token t1;} { 
  t1=<URL> <ENTRY_ASSIGN_OPERATOR> info(t1.image) 
	}
void entry_COMMENT() : {Token t1;} { 
 t1=<COMMENT> <ENTRY_ASSIGN_OPERATOR> info(t1.image) 
	}
void entry_OWNER() : {Token t1;} { 
 t1=<OWNER> <ENTRY_ASSIGN_OPERATOR> info(t1.image) 
	}
void entry_TIMESTAMP() : {Token t1;} { 
 t1=<TIMESTAMP> <ENTRY_ASSIGN_OPERATOR> info(t1.image)  
	}
void entry_ABSTRACT() : {Token t1;} { 
 t1=<ABSTRACT> <ENTRY_ASSIGN_OPERATOR> info(t1.image)  
	}
void entry_REVIEW() : {Token t1;} { 
 t1=<REVIEW> <ENTRY_ASSIGN_OPERATOR> info(t1.image)  
	}
void entry_ANNOTATE() : {Token t1;} { 
 t1=<ANNOTATE> info(t1.image)  // VERIFICAR!!!!!!!!!
//===============================================================================
//ENTRY PRODUCTIONS
	}
void entry_AUTHOR() : {Token t1;} { 
 t1=<AUTHOR> <ENTRY_ASSIGN_OPERATOR> info(t1.image) 
	}
void entry_TITLE() : {Token t1;} { 
  t1=<TITLE> <ENTRY_ASSIGN_OPERATOR> info(t1.image)  
	}
void entry_PUBLISHER() : {Token t1;} { 
 t1=<PUBLISHER> <ENTRY_ASSIGN_OPERATOR> info(t1.image) 
	}
void entry_VOLUME() : {Token t1;} { 
 t1=<VOLUME> info(t1.image) 
	}
void entry_NUMBER() : {Token t1;} { 
 t1=<NUMBER> info(t1.image) 
	}
void entry_SERIES() : {Token t1;} { 
 t1=<SERIES> info(t1.image) 
	}
void entry_ADDRESS() : {Token t1;} { 
 t1=<ADDRESS> <ENTRY_ASSIGN_OPERATOR> info(t1.image) 
	}
void entry_EDITION() : {Token t1;} { 
 t1=<EDITION> info(t1.image) 
	}
void entry_NOTE() : {Token t1;} { 
 t1=<NOTE> <ENTRY_ASSIGN_OPERATOR> info(t1.image) 
	}
void entry_PAGES() : {Token t1;} { 
 t1=<PAGES> info(t1.image) 
	}
void entry_JOURNAL() : {Token t1;} { 
 t1=<JOURNAL> info(t1.image) 
	}
void entry_ORGANIZATION() : {Token t1;} { 
 t1=<ORGANIZATION> info(t1.image) 
	}
void entry_BOOKTITLE() : {Token t1;} { 
 t1=<BOOKTITLE> <ENTRY_ASSIGN_OPERATOR> info(t1.image)  
	}
void entry_EDITOR() : {Token t1;} { 
 t1=<EDITOR> <ENTRY_ASSIGN_OPERATOR> info(t1.image)  
	}
void entry_SCHOOL() : {Token t1;} { 
 t1=<SCHOOL> <ENTRY_ASSIGN_OPERATOR> info(t1.image)  
	}
void entry_TYPE() : {Token t1;} { 
 t1=<TYPE> <ENTRY_ASSIGN_OPERATOR> info(t1.image)  
	}
void entry_HOWPUBLISHED() : {Token t1;} { 
 t1=<HOWPUBLISHED> <ENTRY_ASSIGN_OPERATOR> info(t1.image)  
	}
void entry_LANGUAGE() : {Token t1;} { 
 t1=<LANGUAGE> <ENTRY_ASSIGN_OPERATOR> info(t1.image)  
	}
void entry_CHAPTER() : {Token t1;} { 
 t1=<CHAPTER> <ENTRY_ASSIGN_OPERATOR> info(t1.image)  
	}
void entry_NATIONALITY() : {Token t1;} { 
 t1=<NATIONALITY> <ENTRY_ASSIGN_OPERATOR> info(t1.image)  
	}
void entry_ASSIGNEE() : {Token t1;} { 
 t1=<ASSIGNEE> <ENTRY_ASSIGN_OPERATOR> info(t1.image)  
	}
void entry_INSTITUTION() : {Token t1;} { 
 t1=<INSTITUTION> <ENTRY_ASSIGN_OPERATOR> info(t1.image) 
	}
void entry_REVISION() : {Token t1;} { 
 t1=<REVISION> <ENTRY_ASSIGN_OPERATOR> info(t1.image) 
	}
void entry_YEAR() : {Token t1;} { 
 t1=<YEAR> <ENTRY_ASSIGN_OPERATOR> info(t1.image) 
	}
void entry_YEARFILED() : {Token t1;} { 
 t1=<YEARFILED> <ENTRY_ASSIGN_OPERATOR> info(t1.image)  
	}
void entry_MONTH() : {Token t1;} { 
 t1=<MONTH> <ENTRY_ASSIGN_OPERATOR> info(t1.image) 
	}
void entry_MONTHFILED() : {Token t1;} { 
 t1=<MONTHFILED> <ENTRY_ASSIGN_OPERATOR> info(t1.image)  
	}
void entry_DAYFILED() : {Token t1;} { 
 t1=<DAYFILED> <ENTRY_ASSIGN_OPERATOR> info(t1.image)  
	}
void entry_DAY() : {Token t1;} { 
 t1=<DAY> <ENTRY_ASSIGN_OPERATOR> info(t1.image)  
}

//============================================================================================
void GeneralEntry() : {}
{
	try{
	 (entry_CROSSREF()|entry_KEYWORDS()|entry_FILE()
	 |entry_DOI()|entry_URL()|entry_COMMENT()|entry_OWNER()|entry_TIMESTAMP()|entry_ANNOTATE()
	 )
	}
	 catch (ParseException e) {throw e;}
}

//= = = = = = = == = = = = = = == = = = == = = == = = = = = == = = = = == = = = = = ==
//ITEM PRODUCTIONS
//= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
void Article(String type,String id) : {}
{
	<INFO_SEPARATOR> ArticleEntry(type,id) [Article(type,id)]
}
void ArticleEntry(String type,String id) : {}
{
try{
(
  entry_AUTHOR() | entry_TITLE() | entry_JOURNAL() | entry_YEAR() |entry_VOLUME() | entry_NUMBER() |
  entry_PAGES() | entry_MONTH() | entry_NOTE() 
  )
  | GeneralEntry()
}
	catch (ParseException e) {
	Token te = getToken(0);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"() has an invalid or badly defined entry:" + te.image + ";");
	}
}
//--------------------------------------------------------
void Book(String type,String id) : {}
{
	<INFO_SEPARATOR> BookEntry(type,id) [Book(type,id)]
}
void BookEntry(String type,String id):{}
{
try{
(
 entry_AUTHOR() | entry_TITLE() | entry_YEAR() | entry_PUBLISHER() | entry_EDITOR()
 | entry_VOLUME() | entry_NUMBER()
 | entry_SERIES() |entry_ADDRESS() |entry_EDITION()
 | entry_MONTH() | entry_NOTE() 
 ) 
 | GeneralEntry() //{ System.out.println("DEBUG !!!");}
}
	catch (ParseException e) {
	Token te = getToken(0);
	System.out.println(e.toString());
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"() has an invalid or badly defined entry:" + te.image + ";");
	}
}
//----------------------------------------------------------------
void Booklet(String type,String id) : {}
{
	<INFO_SEPARATOR> BookletEntry(type,id) [Booklet(type,id)]
}
void BookletEntry(String type,String id):{}
{
try{
(
  entry_TITLE() | entry_AUTHOR() | entry_YEAR() | entry_ADDRESS() | entry_HOWPUBLISHED()
 | entry_NOTE() | entry_MONTH() 
 ) 
 | GeneralEntry() //{ System.out.println("DEBUG !!!");}
}
	catch (ParseException e) {
	Token te = getToken(0);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"() has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Conference(String type,String id) : {}
{
	<INFO_SEPARATOR> ConferenceEntry(type,id) [Conference(type,id)]
}
void ConferenceEntry(String type,String id):{}
{
try{
(
  entry_TITLE() | entry_AUTHOR() | entry_YEAR() | entry_BOOKTITLE() | 
  entry_EDITOR()|entry_VOLUME()|entry_NUMBER()|entry_SERIES()|entry_PAGES()|
  entry_ADDRESS()|entry_MONTH()|entry_ORGANIZATION()|entry_PUBLISHER()|entry_NOTE()
 ) 
 | GeneralEntry() //{ System.out.println("DEBUG !!!");}
}
	catch (ParseException e) {
	Token te = getToken(0);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"() has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Electronic(String type,String id) : {}
{
	<INFO_SEPARATOR> ElectronicEntry(type,id) [Electronic(type,id)]
}
void ElectronicEntry(String type,String id):{}
{
try{
(
  entry_AUTHOR()|entry_MONTH()|entry_YEAR()|entry_TITLE()|entry_LANGUAGE()|
  entry_HOWPUBLISHED()|entry_ORGANIZATION()|entry_ADDRESS()|entry_NOTE()//|entry_URL()|
 ) 
 | GeneralEntry() //{ System.out.println("DEBUG !!!");}
}
	catch (ParseException e) {
	Token te = getToken(0);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"() has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Inbook(String type,String id) : {}
{
	<INFO_SEPARATOR> InbookEntry(type,id) [Inbook(type,id)]
}
void InbookEntry(String type,String id):{}
{
try{
(
  entry_CHAPTER()|entry_PAGES()|entry_TITLE()|entry_PUBLISHER()|entry_YEAR()|entry_EDITOR()|entry_AUTHOR()|
  entry_VOLUME()|entry_NUMBER()|entry_SERIES()|entry_TYPE()|entry_ADDRESS()|entry_EDITION()|entry_MONTH()|entry_NOTE()
 ) 
 | GeneralEntry() //{ System.out.println("DEBUG !!!");}
}
	catch (ParseException e) {
	Token te = getToken(0);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"() has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Incollection(String type,String id) : {}
{
	<INFO_SEPARATOR> IncollectionEntry(type,id) [Incollection(type,id)]
}
void IncollectionEntry(String type,String id):{}
{
try{
(
  entry_AUTHOR()|entry_TITLE()|entry_BOOKTITLE()|entry_PUBLISHER()|entry_YEAR()|
  entry_EDITOR()|entry_VOLUME()|entry_NUMBER()|entry_SERIES()|entry_TYPE()|
  entry_CHAPTER()|entry_PAGES()|entry_ADDRESS()|entry_EDITION()|entry_MONTH()|entry_NOTE()
 ) 
 | GeneralEntry() //{ System.out.println("DEBUG !!!");}
}
	catch (ParseException e) {
	Token te = getToken(0);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"() has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Inproceedings(String type,String id) : {}
{
	<INFO_SEPARATOR> InproceedingsEntry(type,id) [Inproceedings(type,id)]
}
void InproceedingsEntry(String type,String id):{}
{
try{
(
  entry_AUTHOR()|entry_TITLE()|entry_BOOKTITLE()|entry_YEAR()|
  entry_EDITOR()|entry_VOLUME()|entry_NUMBER()|entry_SERIES()|entry_PAGES()|
  entry_ADDRESS()|entry_MONTH()|entry_ORGANIZATION()|entry_PUBLISHER()|entry_NOTE()
 ) 
 | GeneralEntry() //{ System.out.println("DEBUG !!!");}
}
	catch (ParseException e) {
	Token te = getToken(0);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"() has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Manual(String type,String id) : {}
{
	<INFO_SEPARATOR> ManualEntry(type,id) [Manual(type,id)]
}
void ManualEntry(String type,String id) :  {}
{
try{
(
  entry_TITLE()  | entry_AUTHOR() | entry_ORGANIZATION() | entry_ADDRESS() | entry_EDITION() |
                  entry_MONTH() | entry_YEAR() | entry_NOTE()
)
| GeneralEntry()
}
	catch (ParseException e) {
	Token te = getToken(0);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"() has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void MasterThesis(String type,String id) : {}
{
	<INFO_SEPARATOR> MasterThesisEntry(type,id) [MasterThesis(type,id)]
}
void MasterThesisEntry(String type,String id): {}
{
try{
(
  entry_AUTHOR() | entry_TITLE() | entry_SCHOOL() | entry_YEAR()  |entry_TYPE() | entry_ADDRESS() |
                       entry_MONTH() | entry_NOTE() 
)
| GeneralEntry()
}
	catch (ParseException e) {
	Token te = getToken(0);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"() has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Misc(String type,String id) : {}
{
	<INFO_SEPARATOR> MiscEntry(type,id) [Misc(type,id)]
}
void MiscEntry(String type,String id): {}
{
try{
(
  entry_AUTHOR() | entry_TITLE() | entry_HOWPUBLISHED() | entry_MONTH() | entry_YEAR() | entry_NOTE() 
)
| GeneralEntry()
}
	catch (ParseException e) {
	Token te = getToken(0);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"() has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Other(String type,String id) : {}
{
	<INFO_SEPARATOR> OtherEntry(type,id) [Other(type,id)]
}
void OtherEntry(String type,String id):{}
{
try{
GeneralEntry() 
}
	catch (ParseException e) {
	Token te = getToken(0);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"() has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Patent(String type,String id) : {}
{
	<INFO_SEPARATOR> PatentEntry(type,id) [Patent(type,id)]
}
void PatentEntry(String type,String id):{}
{
try{
(
  entry_NATIONALITY()|entry_NUMBER()|entry_YEAR()|entry_YEARFILED()|
  entry_AUTHOR()|entry_TITLE()|entry_LANGUAGE()|entry_ASSIGNEE()|entry_ADDRESS()|
  entry_TYPE()|entry_DAY()|entry_DAYFILED()|entry_MONTH()|entry_MONTHFILED()
 ) 
 | GeneralEntry() //{ System.out.println("DEBUG !!!");}
}
	catch (ParseException e) {
	Token te = getToken(0);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"() has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Periodical(String type,String id) : {}
{
	<INFO_SEPARATOR> PeriodicalEntry(type,id) [Periodical(type,id)]
}
void PeriodicalEntry(String type,String id):{}
{
try{
(
  entry_TITLE()|entry_YEAR()|
  entry_EDITOR()|entry_LANGUAGE()|entry_SERIES()|entry_VOLUME()|
  entry_NUMBER()|entry_ORGANIZATION()|entry_MONTH()|entry_NOTE()//|entry_URL()
 ) 
 | GeneralEntry() //{ System.out.println("DEBUG !!!");}
}
	catch (ParseException e) {
	Token te = getToken(0);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"() has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void PhdThesis(String type,String id) : {}
{
	<INFO_SEPARATOR> PhdThesisEntry(type,id) [PhdThesis(type,id)]
}
void PhdThesisEntry(String type,String id): {}
{
try{
(
  entry_AUTHOR() | entry_TITLE() | entry_SCHOOL() | entry_YEAR() |entry_TYPE() | entry_ADDRESS() |
                    entry_MONTH() | entry_NOTE()
)
| GeneralEntry()
}
	catch (ParseException e) {
	Token te = getToken(0);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"() has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Proceedings(String type,String id) : {}
{
	<INFO_SEPARATOR> ProceedingsEntry(type,id) [Proceedings(type,id)]
}
void ProceedingsEntry(String type,String id): {}
{
try{
(
 entry_TITLE() | entry_BOOKTITLE() | entry_EDITOR() | entry_VOLUME() | entry_NUMBER() |
 entry_SERIES() | entry_ADDRESS() | entry_MONTH() | entry_ORGANIZATION() | entry_PUBLISHER() 
 | entry_NOTE() | entry_YEAR() 

)
| GeneralEntry()
}
	catch (ParseException e) {
	Token te = getToken(0);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"() has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Standard(String type,String id) : {}
{
	<INFO_SEPARATOR> StandardEntry(type,id) [Standard(type,id)]
}
void StandardEntry(String type,String id):{}
{
try{
(
  entry_TITLE()|entry_ORGANIZATION()|entry_INSTITUTION()|
  entry_AUTHOR()|entry_LANGUAGE()|entry_HOWPUBLISHED()|entry_TYPE()|entry_NUMBER()|
  entry_REVISION()|entry_ADDRESS()|entry_MONTH()|entry_YEAR()|entry_NOTE()//|entry_URL()
 ) 
 | GeneralEntry() //{ System.out.println("DEBUG !!!");}
}
	catch (ParseException e) {
	Token te = getToken(0);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"() has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Techreport(String type,String id) : {}
{
	<INFO_SEPARATOR> TechreportEntry(type,id) [Techreport(type,id)]
}
void TechreportEntry(String type,String id):{}
{
try{
(
  entry_AUTHOR()| entry_TITLE()| entry_INSTITUTION()| entry_YEAR()|
   entry_TYPE()| entry_NUMBER()| entry_ADDRESS()| entry_MONTH()| entry_NOTE()
 ) 
 | GeneralEntry() //{ System.out.println("DEBUG !!!");}
}
	catch (ParseException e) {
	Token te = getToken(0);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"() has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
void Unpublished(String type,String id) : {}
{
	<INFO_SEPARATOR> UnpublishedEntry(type,id) [Unpublished(type,id)]
}
void UnpublishedEntry(String type,String id):{}
{
try{
(
  entry_AUTHOR()|  entry_TITLE()|  entry_NOTE()|
    entry_YEAR()|  entry_MONTH()
 ) 
 | GeneralEntry() //{ System.out.println("DEBUG !!!");}
}
	catch (ParseException e) {
	Token te = getToken(0);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"() has an invalid or badly defined entry:" + te.image + ";");
	}
}
//------------------------------------------------------------------
//==============================================================================
//@string stuff/*
void OpenStringOperatorEntry(Token t0) : {}
{
try{
	t0=<STRING_OPEN_S>
	}
catch (ParseException e) {
    System.out.println("Warning: @string not opened at line " + t0.endLine+";");// + e.toString());
	}
}
 void StringOperatorEntry() : {Token t0; Token t1; Token t2;}
 {
	 t0=<T_STRING_STATE>
	 OpenStringOperatorEntry(t0)
	 try{
  t1=<STRING_TAG>
  <STRING_EQUAL>
  (t2=<INFO_ENTRY1>|t2=<INFO_ENTRY2>) { Item.subs.add(t1.image,t2.image.substring(1,t2.image.length()-1) ); }
  //System.out.println("debug str:" + t1.image + "---" + t2.image);}
	 }
	 catch (ParseException e) {
		 System.out.println(e.toString());
		  System.out.println("Error(Line:"+ t0.endLine + "|Column:"+ t0.endColumn +"): @string is badly defined;");
	 }

	 try{
	 CloseItem()
	}catch (ParseException e) {
	    Token t;
    do {
      t = getNextToken();
    } while (t.kind != START_ITEM && t.kind != END_ITEM);
	 
	}
 }