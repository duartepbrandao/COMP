/* Exp1.java */
/* Generated By:JavaCC: Do not edit this line. Exp1.java */
import java.util.Comparator;
import java.io.InputStream;
// código Java que invoca o parser
public class Exp1 implements Exp1Constants {

static java.util.List<Item> items;
static String order_token;
//static java.util.List<String> crossRef;

public static void main(String args[]) throws ParseException {

//= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
//inicializaçao da lista de items a ser guardados
items = new java.util.ArrayList<Item>();
order_token="";
//= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
//send stuff to parser
//receber do teclado
//String input = readFile("test.txt", StandardCharsets.UTF_8);
try{
java.io.InputStream input = new java.io.FileInputStream("test.txt");
Exp1 parser = new Exp1(input);//System.in);
try{
parser.Start();
}catch(ParseException e){}
}catch(Exception e){ System.out.println("FAILED TO READ FILE"); return; }
//= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
//order stuff
if (order_token!="")//create a token later for ordering stuff
java.util.Collections.sort(items, new ItemComparator(order_token));
//= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
//get infos (1st passage on "tree")
//get crossrefs
for(int i = 0; i<items.size(); i++)
{
        boolean missing=true;
        String cref = items.get(i).getEntry("crossref");
        if (!cref.equals("?"))
        {
        for(int j = 0; j<items.size(); j++)
                if ( items.get(j).id.equals(cref))
                {
                        items.get(i).crossref = items.get(j);
                        missing=false;
                }
        if (missing) System.out.println("Item <" + items.get(i).id +"> has a not found reference <"+ cref +">");
        }
}
//= = = = = = = = = = = = = = = = =  = = = = = = = = = = = = = = = = = =
//check more stuff and export 2 file (2nd passage on tree)
        try{
        java.io.PrintWriter out = new java.io.PrintWriter("biblio.html");

        out.println("<!DOCTYPE html>");
        out.println("<html>");

/*	
<head>
  <title>Page Title</title>
</head>
*/
        out.println("<body>\u005cn");
        for(int i = 0; i<items.size(); i++)
        {
                //check item's mandatory entrie
                items.get(i).validateItemNonOptionalFields();
                //export item to output file
                items.get(i).save2HTML(out);
                // /*debug:*/System.out.println(items.get(i).id);
        }
        out.println("</body>\u005cn");
        out.println("</html>");
        out.close();
        System.out.println("SUCCESSFULY CREATED OUTPUT FILE");
        }catch(Exception e) {
        System.out.println("FAILED 2 CREATE OUTPUT FILE");
        }
}

//<EXCEPTION_T> TOKEN: {:DEFAULT }//\n serve como eof temporariamente


//START=REFERENCIA
  static final public void Start() throws ParseException {Token t1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ORDER_SIGN:{
      Order();
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      Reference();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case T_ARTICLE:
      case T_BOOK:
      case T_MANUAL:
      case T_MASTERSTHESIS:
      case T_MISC:
      case T_PHDTHESIS:
      case T_PROCEEDINGS:
      case START_ITEM:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
  }

  static final public void Order() throws ParseException {Token t1;
    try {
      jj_consume_token(ORDER_SIGN);
      t1 = jj_consume_token(ORDER_ENTRY);
order_token = t1.image.toLowerCase();
    } catch (ParseException e) {
System.out.println("Warning:Order TAG badly defined. use ## followed by an entry name;");
    }
  }

/*catch (ParseException e) {
	Token taux = getNextToken();
    System.out.println("Item not defined properly\n");// + e.toString());
    Token t;
    /*do {
      t = getNextToken();
    } while (t.kind != ID);*/
        //}
  static final public 
void Reference() throws ParseException {Token t1; Token t2;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case START_ITEM:{
        jj_consume_token(START_ITEM);
        break;
        }
      default:
        jj_la1[2] = jj_gen;
//start item missing
        Token taux = getToken(0);
        System.out.println("Warning:Item not opening with '@'. Immediately before line " + taux.beginLine + ",column " +  taux.beginColumn +";");
      }
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case T_ARTICLE:{
          t1 = jj_consume_token(T_ARTICLE);
          OpenItem(t1);
          t2 = checkID();
items.add(new Item(t1.image,t2.image));
          Article(t1.image,t2.image);
          break;
          }
        case T_BOOK:{
          t1 = jj_consume_token(T_BOOK);
          OpenItem(t1);
          t2 = checkID();
items.add(new Item(t1.image,t2.image));
          Book(t1.image,t2.image);
          break;
          }
        case T_MANUAL:{
          t1 = jj_consume_token(T_MANUAL);
          OpenItem(t1);
          t2 = checkID();
items.add(new Item(t1.image,t2.image));
          Manual(t1.image,t2.image);
          break;
          }
        case T_MASTERSTHESIS:{
          t1 = jj_consume_token(T_MASTERSTHESIS);
          OpenItem(t1);
          t2 = checkID();
items.add(new Item(t1.image,t2.image));
          MasterThesis(t1.image,t2.image);
          break;
          }
        case T_MISC:{
          t1 = jj_consume_token(T_MISC);
          OpenItem(t1);
          t2 = checkID();
items.add(new Item(t1.image,t2.image));
          Misc(t1.image,t2.image);
          break;
          }
        case T_PHDTHESIS:{
          t1 = jj_consume_token(T_PHDTHESIS);
          OpenItem(t1);
          t2 = checkID();
items.add(new Item(t1.image,t2.image));
          PhdThesis(t1.image,t2.image);
          break;
          }
        case T_PROCEEDINGS:{
          t1 = jj_consume_token(T_PROCEEDINGS);
          OpenItem(t1);
          t2 = checkID();
items.add(new Item(t1.image,t2.image));
          Proceedings(t1.image,t2.image);
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
Token te = getToken(0);
    System.out.println("Error(Line:" + te.endLine +"|Column:" + te.endColumn +"):Item badly defined;");// + e.toString());
        {if (true) throw e;}
      }
      CloseItem();
    } catch (ParseException e) {
Token t;
    do {
      t = getNextToken();
    } while (t.kind != START_ITEM && t.kind != END_ITEM);
    }
  }

  static final public void OpenItem(Token t1) throws ParseException {
    try {
      jj_consume_token(OPEN_ITEM);
    } catch (ParseException e) {
System.out.println("Warning:"+t1.image + " not opened at line " + t1.endLine + ", column " + t1.endColumn + ";");// + e.toString());

    }
  }

  static final public Token checkID() throws ParseException {Token t1;
    t1 = jj_consume_token(ID);
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public void CloseItem() throws ParseException {
    try {
      jj_consume_token(END_ITEM);
    } catch (ParseException e) {
Token taux = getToken(0);
        System.out.println("Warning:Not closing item with '}'. At line " + taux.beginLine + ",column " +  taux.beginColumn +";");
        {if (true) throw e;}
    }
  }

  static final public void GeneralEntry() throws ParseException {Token t1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ENTRY_CROSSREF:{
      t1 = jj_consume_token(ENTRY_CROSSREF);
      break;
      }
    case ENTRY_KEYWORDS:{
      t1 = jj_consume_token(ENTRY_KEYWORDS);
      break;
      }
    case ENTRY_FILE:{
      t1 = jj_consume_token(ENTRY_FILE);
      break;
      }
    case ENTRY_DOI:{
      t1 = jj_consume_token(ENTRY_DOI);
      break;
      }
    case ENTRY_URL:{
      t1 = jj_consume_token(ENTRY_URL);
      break;
      }
    case ENTRY_COMMENT:{
      t1 = jj_consume_token(ENTRY_COMMENT);
      break;
      }
    case ENTRY_OWNER:{
      t1 = jj_consume_token(ENTRY_OWNER);
      break;
      }
    case ENTRY_TIMESTAMP:{
      t1 = jj_consume_token(ENTRY_TIMESTAMP);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
items.get(items.size()-1).addEntry(t1.image);
  }

//= = = = = = = == = = = = = = == = = = == = = == = = = = = == = = = = == = = = = = == 
//ENTRIES PRODUCTIONS
//= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
  static final public void Article(String type,String id) throws ParseException {Token t1;
    jj_consume_token(INFO_SEPARATOR);
    ArticleEntry(type,id);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INFO_SEPARATOR:{
      Article(type,id);
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
  }

  static final public void ArticleEntry(String type,String id) throws ParseException {Token t1;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ENTRY_AUTHOR:
      case ENTRY_TITLE:
      case ENTRY_YEAR:
      case ENTRY_KEY:
      case ENTRY_VOLUME:
      case ENTRY_NUMBER:
      case ENTRY_MONTH:
      case ENTRY_NOTE:
      case ENTRY_ANNNOTE:
      case ENTRY_PAGES:
      case ENTRY_JOURNAL:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ENTRY_AUTHOR:{
          t1 = jj_consume_token(ENTRY_AUTHOR);
          break;
          }
        case ENTRY_TITLE:{
          t1 = jj_consume_token(ENTRY_TITLE);
          break;
          }
        case ENTRY_JOURNAL:{
          t1 = jj_consume_token(ENTRY_JOURNAL);
          break;
          }
        case ENTRY_YEAR:{
          t1 = jj_consume_token(ENTRY_YEAR);
          break;
          }
        case ENTRY_KEY:{
          t1 = jj_consume_token(ENTRY_KEY);
          break;
          }
        case ENTRY_VOLUME:{
          t1 = jj_consume_token(ENTRY_VOLUME);
          break;
          }
        case ENTRY_NUMBER:{
          t1 = jj_consume_token(ENTRY_NUMBER);
          break;
          }
        case ENTRY_PAGES:{
          t1 = jj_consume_token(ENTRY_PAGES);
          break;
          }
        case ENTRY_MONTH:{
          t1 = jj_consume_token(ENTRY_MONTH);
          break;
          }
        case ENTRY_NOTE:{
          t1 = jj_consume_token(ENTRY_NOTE);
          break;
          }
        case ENTRY_ANNNOTE:{
          t1 = jj_consume_token(ENTRY_ANNNOTE);
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
items.get(items.size()-1).addEntry(t1.image);
        break;
        }
      case ENTRY_CROSSREF:
      case ENTRY_KEYWORDS:
      case ENTRY_FILE:
      case ENTRY_DOI:
      case ENTRY_URL:
      case ENTRY_COMMENT:
      case ENTRY_OWNER:
      case ENTRY_TIMESTAMP:{
        GeneralEntry();
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
Token te = getToken(1);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"> has an invalid or badly defined entry:" + te.image + ";");
    }
  }

  static final public void Book(String type,String id) throws ParseException {Token t1;
    jj_consume_token(INFO_SEPARATOR);
    BookEntry(type,id);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INFO_SEPARATOR:{
      Book(type,id);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
  }

  static final public void BookEntry(String type,String id) throws ParseException {Token t1;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ENTRY_AUTHOR:
      case ENTRY_TITLE:
      case ENTRY_YEAR:
      case ENTRY_PUBLISHER:
      case ENTRY_KEY:
      case ENTRY_VOLUME:
      case ENTRY_NUMBER:
      case ENTRY_SERIES:
      case ENTRY_ADDRESS:
      case ENTRY_EDITION:
      case ENTRY_MONTH:
      case ENTRY_NOTE:
      case ENTRY_ANNNOTE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ENTRY_AUTHOR:{
          t1 = jj_consume_token(ENTRY_AUTHOR);
          break;
          }
        case ENTRY_TITLE:{
          t1 = jj_consume_token(ENTRY_TITLE);
          break;
          }
        case ENTRY_YEAR:{
          t1 = jj_consume_token(ENTRY_YEAR);
          break;
          }
        case ENTRY_PUBLISHER:{
          t1 = jj_consume_token(ENTRY_PUBLISHER);
          break;
          }
        case ENTRY_KEY:{
          t1 = jj_consume_token(ENTRY_KEY);
          break;
          }
        case ENTRY_VOLUME:{
          t1 = jj_consume_token(ENTRY_VOLUME);
          break;
          }
        case ENTRY_NUMBER:{
          t1 = jj_consume_token(ENTRY_NUMBER);
          break;
          }
        case ENTRY_SERIES:{
          t1 = jj_consume_token(ENTRY_SERIES);
          break;
          }
        case ENTRY_ADDRESS:{
          t1 = jj_consume_token(ENTRY_ADDRESS);
          break;
          }
        case ENTRY_EDITION:{
          t1 = jj_consume_token(ENTRY_EDITION);
          break;
          }
        case ENTRY_MONTH:{
          t1 = jj_consume_token(ENTRY_MONTH);
          break;
          }
        case ENTRY_NOTE:{
          t1 = jj_consume_token(ENTRY_NOTE);
          break;
          }
        case ENTRY_ANNNOTE:{
          t1 = jj_consume_token(ENTRY_ANNNOTE);
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
items.get(items.size()-1).addEntry(t1.image);
        break;
        }
      case ENTRY_CROSSREF:
      case ENTRY_KEYWORDS:
      case ENTRY_FILE:
      case ENTRY_DOI:
      case ENTRY_URL:
      case ENTRY_COMMENT:
      case ENTRY_OWNER:
      case ENTRY_TIMESTAMP:{
        GeneralEntry();
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
Token te = getToken(1);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"> has an invalid or badly defined entry:" + te.image + ";");
    }
  }

  static final public void Manual(String type,String id) throws ParseException {Token t1;
    jj_consume_token(INFO_SEPARATOR);
    ManualEntry(type,id);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INFO_SEPARATOR:{
      Manual(type,id);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
  }

  static final public void ManualEntry(String type,String id) throws ParseException {Token t1;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ENTRY_AUTHOR:
      case ENTRY_TITLE:
      case ENTRY_YEAR:
      case ENTRY_KEY:
      case ENTRY_ADDRESS:
      case ENTRY_EDITION:
      case ENTRY_MONTH:
      case ENTRY_NOTE:
      case ENTRY_ANNNOTE:
      case ENTRY_ORGANIZATION:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ENTRY_TITLE:{
          t1 = jj_consume_token(ENTRY_TITLE);
          break;
          }
        case ENTRY_KEY:{
          t1 = jj_consume_token(ENTRY_KEY);
          break;
          }
        case ENTRY_AUTHOR:{
          t1 = jj_consume_token(ENTRY_AUTHOR);
          break;
          }
        case ENTRY_ORGANIZATION:{
          t1 = jj_consume_token(ENTRY_ORGANIZATION);
          break;
          }
        case ENTRY_ADDRESS:{
          t1 = jj_consume_token(ENTRY_ADDRESS);
          break;
          }
        case ENTRY_EDITION:{
          t1 = jj_consume_token(ENTRY_EDITION);
          break;
          }
        case ENTRY_MONTH:{
          t1 = jj_consume_token(ENTRY_MONTH);
          break;
          }
        case ENTRY_YEAR:{
          t1 = jj_consume_token(ENTRY_YEAR);
          break;
          }
        case ENTRY_NOTE:{
          t1 = jj_consume_token(ENTRY_NOTE);
          break;
          }
        case ENTRY_ANNNOTE:{
          t1 = jj_consume_token(ENTRY_ANNNOTE);
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
items.get(items.size()-1).addEntry(t1.image);
        break;
        }
      case ENTRY_CROSSREF:
      case ENTRY_KEYWORDS:
      case ENTRY_FILE:
      case ENTRY_DOI:
      case ENTRY_URL:
      case ENTRY_COMMENT:
      case ENTRY_OWNER:
      case ENTRY_TIMESTAMP:{
        GeneralEntry();
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
Token te = getToken(1);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"> has an invalid or badly defined entry:" + te.image + ";");
    }
  }

  static final public void MasterThesis(String type,String id) throws ParseException {Token t1;
    jj_consume_token(INFO_SEPARATOR);
    MasterThesisEntry(type,id);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INFO_SEPARATOR:{
      MasterThesis(type,id);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

  static final public void MasterThesisEntry(String type,String id) throws ParseException {Token t1;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ENTRY_AUTHOR:
      case ENTRY_TITLE:
      case ENTRY_YEAR:
      case ENTRY_KEY:
      case ENTRY_ADDRESS:
      case ENTRY_MONTH:
      case ENTRY_NOTE:
      case ENTRY_ANNNOTE:
      case ENTRY_SCHOOL:
      case ENTRY_TYPE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ENTRY_AUTHOR:{
          t1 = jj_consume_token(ENTRY_AUTHOR);
          break;
          }
        case ENTRY_TITLE:{
          t1 = jj_consume_token(ENTRY_TITLE);
          break;
          }
        case ENTRY_SCHOOL:{
          t1 = jj_consume_token(ENTRY_SCHOOL);
          break;
          }
        case ENTRY_YEAR:{
          t1 = jj_consume_token(ENTRY_YEAR);
          break;
          }
        case ENTRY_KEY:{
          t1 = jj_consume_token(ENTRY_KEY);
          break;
          }
        case ENTRY_TYPE:{
          t1 = jj_consume_token(ENTRY_TYPE);
          break;
          }
        case ENTRY_ADDRESS:{
          t1 = jj_consume_token(ENTRY_ADDRESS);
          break;
          }
        case ENTRY_MONTH:{
          t1 = jj_consume_token(ENTRY_MONTH);
          break;
          }
        case ENTRY_NOTE:{
          t1 = jj_consume_token(ENTRY_NOTE);
          break;
          }
        case ENTRY_ANNNOTE:{
          t1 = jj_consume_token(ENTRY_ANNNOTE);
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
items.get(items.size()-1).addEntry(t1.image);
        break;
        }
      case ENTRY_CROSSREF:
      case ENTRY_KEYWORDS:
      case ENTRY_FILE:
      case ENTRY_DOI:
      case ENTRY_URL:
      case ENTRY_COMMENT:
      case ENTRY_OWNER:
      case ENTRY_TIMESTAMP:{
        GeneralEntry();
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
Token te = getToken(1);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"> has an invalid or badly defined entry:" + te.image + ";");
    }
  }

  static final public void Misc(String type,String id) throws ParseException {Token t1;
    jj_consume_token(INFO_SEPARATOR);
    MiscEntry(type,id);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INFO_SEPARATOR:{
      Misc(type,id);
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      ;
    }
  }

  static final public void MiscEntry(String type,String id) throws ParseException {Token t1;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ENTRY_AUTHOR:
      case ENTRY_TITLE:
      case ENTRY_YEAR:
      case ENTRY_KEY:
      case ENTRY_MONTH:
      case ENTRY_NOTE:
      case ENTRY_ANNNOTE:
      case ENTRY_HOWPUBLISHED:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ENTRY_KEY:{
          t1 = jj_consume_token(ENTRY_KEY);
          break;
          }
        case ENTRY_AUTHOR:{
          t1 = jj_consume_token(ENTRY_AUTHOR);
          break;
          }
        case ENTRY_TITLE:{
          t1 = jj_consume_token(ENTRY_TITLE);
          break;
          }
        case ENTRY_HOWPUBLISHED:{
          t1 = jj_consume_token(ENTRY_HOWPUBLISHED);
          break;
          }
        case ENTRY_MONTH:{
          t1 = jj_consume_token(ENTRY_MONTH);
          break;
          }
        case ENTRY_YEAR:{
          t1 = jj_consume_token(ENTRY_YEAR);
          break;
          }
        case ENTRY_NOTE:{
          t1 = jj_consume_token(ENTRY_NOTE);
          break;
          }
        case ENTRY_ANNNOTE:{
          t1 = jj_consume_token(ENTRY_ANNNOTE);
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
items.get(items.size()-1).addEntry(t1.image);
        break;
        }
      case ENTRY_CROSSREF:
      case ENTRY_KEYWORDS:
      case ENTRY_FILE:
      case ENTRY_DOI:
      case ENTRY_URL:
      case ENTRY_COMMENT:
      case ENTRY_OWNER:
      case ENTRY_TIMESTAMP:{
        GeneralEntry();
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
Token te = getToken(1);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"> has an invalid or badly defined entry:" + te.image + ";");
    }
  }

  static final public void PhdThesis(String type,String id) throws ParseException {Token t1;
    jj_consume_token(INFO_SEPARATOR);
    PhdThesisEntry(type,id);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INFO_SEPARATOR:{
      PhdThesis(type,id);
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      ;
    }
  }

  static final public void PhdThesisEntry(String type,String id) throws ParseException {Token t1;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ENTRY_AUTHOR:
      case ENTRY_TITLE:
      case ENTRY_YEAR:
      case ENTRY_KEY:
      case ENTRY_ADDRESS:
      case ENTRY_MONTH:
      case ENTRY_NOTE:
      case ENTRY_ANNNOTE:
      case ENTRY_SCHOOL:
      case ENTRY_TYPE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ENTRY_AUTHOR:{
          t1 = jj_consume_token(ENTRY_AUTHOR);
          break;
          }
        case ENTRY_TITLE:{
          t1 = jj_consume_token(ENTRY_TITLE);
          break;
          }
        case ENTRY_SCHOOL:{
          t1 = jj_consume_token(ENTRY_SCHOOL);
          break;
          }
        case ENTRY_YEAR:{
          t1 = jj_consume_token(ENTRY_YEAR);
          break;
          }
        case ENTRY_KEY:{
          t1 = jj_consume_token(ENTRY_KEY);
          break;
          }
        case ENTRY_TYPE:{
          t1 = jj_consume_token(ENTRY_TYPE);
          break;
          }
        case ENTRY_ADDRESS:{
          t1 = jj_consume_token(ENTRY_ADDRESS);
          break;
          }
        case ENTRY_MONTH:{
          t1 = jj_consume_token(ENTRY_MONTH);
          break;
          }
        case ENTRY_NOTE:{
          t1 = jj_consume_token(ENTRY_NOTE);
          break;
          }
        case ENTRY_ANNNOTE:{
          t1 = jj_consume_token(ENTRY_ANNNOTE);
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
items.get(items.size()-1).addEntry(t1.image);
        break;
        }
      case ENTRY_CROSSREF:
      case ENTRY_KEYWORDS:
      case ENTRY_FILE:
      case ENTRY_DOI:
      case ENTRY_URL:
      case ENTRY_COMMENT:
      case ENTRY_OWNER:
      case ENTRY_TIMESTAMP:{
        GeneralEntry();
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
Token te = getToken(1);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"> has an invalid or badly defined entry:" + te.image + ";");
    }
  }

  static final public void Proceedings(String type,String id) throws ParseException {Token t1;
    jj_consume_token(INFO_SEPARATOR);
    ProceedingsEntry(type,id);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INFO_SEPARATOR:{
      Proceedings(type,id);
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      ;
    }
  }

  static final public void ProceedingsEntry(String type,String id) throws ParseException {Token t1;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ENTRY_TITLE:
      case ENTRY_PUBLISHER:
      case ENTRY_KEY:
      case ENTRY_VOLUME:
      case ENTRY_NUMBER:
      case ENTRY_SERIES:
      case ENTRY_ADDRESS:
      case ENTRY_MONTH:
      case ENTRY_NOTE:
      case ENTRY_ANNNOTE:
      case ENTRY_ORGANIZATION:
      case ENTRY_BOOKTITLE:
      case ENTRY_EDITOR:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ENTRY_TITLE:{
          t1 = jj_consume_token(ENTRY_TITLE);
          break;
          }
        case ENTRY_KEY:{
          t1 = jj_consume_token(ENTRY_KEY);
          break;
          }
        case ENTRY_BOOKTITLE:{
          t1 = jj_consume_token(ENTRY_BOOKTITLE);
          break;
          }
        case ENTRY_EDITOR:{
          t1 = jj_consume_token(ENTRY_EDITOR);
          break;
          }
        case ENTRY_VOLUME:{
          t1 = jj_consume_token(ENTRY_VOLUME);
          break;
          }
        case ENTRY_NUMBER:{
          t1 = jj_consume_token(ENTRY_NUMBER);
          break;
          }
        case ENTRY_SERIES:{
          t1 = jj_consume_token(ENTRY_SERIES);
          break;
          }
        case ENTRY_ADDRESS:{
          t1 = jj_consume_token(ENTRY_ADDRESS);
          break;
          }
        case ENTRY_MONTH:{
          t1 = jj_consume_token(ENTRY_MONTH);
          break;
          }
        case ENTRY_ORGANIZATION:{
          t1 = jj_consume_token(ENTRY_ORGANIZATION);
          break;
          }
        case ENTRY_PUBLISHER:{
          t1 = jj_consume_token(ENTRY_PUBLISHER);
          break;
          }
        case ENTRY_NOTE:{
          t1 = jj_consume_token(ENTRY_NOTE);
          break;
          }
        case ENTRY_ANNNOTE:{
          t1 = jj_consume_token(ENTRY_ANNNOTE);
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
items.get(items.size()-1).addEntry(t1.image);
        break;
        }
      case ENTRY_CROSSREF:
      case ENTRY_KEYWORDS:
      case ENTRY_FILE:
      case ENTRY_DOI:
      case ENTRY_URL:
      case ENTRY_COMMENT:
      case ENTRY_OWNER:
      case ENTRY_TIMESTAMP:{
        GeneralEntry();
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
Token te = getToken(1);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"> has an invalid or badly defined entry:" + te.image + ";");
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public Exp1TokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[26];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20,0x1fc0,0x0,0x1fc0,0x15554000,0x0,0x0,0x15554000,0x0,0x0,0x15554000,0x0,0x0,0x15554000,0x0,0x0,0x15554000,0x0,0x0,0x15554000,0x0,0x0,0x15554000,0x0,0x0,0x15554000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x55405454,0x55405454,0x0,0x5555554,0x5555554,0x0,0x5540454,0x5540454,0x0,0x5440454,0x5440454,0x0,0x5400454,0x5400454,0x0,0x5440454,0x5440454,0x0,0x5455510,0x5455510,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x2000,0x2000,0x0,0x0,0x1000,0x0,0x0,0x1000,0x0,0x0,0x1000,0x1,0x1,0x1000,0x140,0x140,0x1000,0x400,0x400,0x1000,0x140,0x140,0x1000,0x15,0x15,};
   }

  /** Constructor with InputStream. */
  public Exp1(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Exp1(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new Exp1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Exp1(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new Exp1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Exp1(Exp1TokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(Exp1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[87];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 26; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 87; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
