//options
//{
//  LOOKAHEAD=1;
//}

PARSER_BEGIN(Exp1)
import java.util.Comparator;
// código Java que invoca o parser
public class Exp1 {

static java.util.List<Item> items;

public static void main(String args[]) throws ParseException {


//inicializaçao da lista de items a ser guardados
items = new java.util.ArrayList<Item>();

//receber do teclado
Exp1 parser = new Exp1(System.in);
try{
parser.Start();
}catch(ParseException e){}

//order stuff
if (true)//create a token later for ordering stuff
java.util.Collections.sort(items, new ItemAutorNameComparator("author"));

//save file
	try{
	java.io.PrintWriter out = new java.io.PrintWriter("biblio.html");
	
	out.println("<!DOCTYPE html>");
	out.println("<html>");
	
/*	
<head>
  <title>Page Title</title>
</head>
*/
	out.println("<body>\n");
	for(int i = 0; i<items.size(); i++)
	{
		items.get(i).save2HTML(out);
		//debug:System.out.println(items.get(i).id);
	}
	out.println("</body>\n");
	out.println("</html>");
	out.close();
	System.out.println("SUCCESSFULY CREATED OUTPUT FILE");
	}catch(Exception e) {
	System.out.println("FAILED 2 CREATE OUTPUT FILE");
	}
}
}
PARSER_END(Exp1)
// símbolos que não devem ser considerados na análise
SKIP :
{
 " " | "\t" | "\r"
}
// definição dos tokens (símbolos terminais)
TOKEN:
{
	<ORDER_SIGN: "##" >
	
	//===========================================
	//DEFINIR TIPOS
	//===========================================
	|<T_ARTICLE: "article" >
	|<T_BOOK: "book" >
	|<T_MANUAL: "manual" >
	|<T_MASTERSTHESIS: "masterThesis" >
	|<T_MISC: "misc" >
	|<T_PHDTHESIS: "phdThesis" >
	|<T_PROCEEDINGS: "proceedings" >

	//===========================================
	//DEFINIR ENTRIES
	//===========================================
|<AUTHOR: ("a"|"A")("u"|"U")("t"|"T")("h"|"H")("o"|"O")("r"|"R") >
	|<ENTRY_AUTHOR: <AUTHOR> "=" <INFO_OPEN> (["a"-"z","A"-"Z"])+ <INFO_CLOSE> >
|<TITLE:("t"|"T")("i"|"I")("t"|"T")("l"|"L")("e"|"E")>
	|<ENTRY_TITLE:  <TITLE> "=" <INFO_OPEN> (["a"-"z","A"-"Z"])+ <INFO_CLOSE>  >
|<YEAR:("y"|"Y")("e"|"E")("a"|"A")("r"|"R")>
	|<ENTRY_YEAR: <YEAR> "=" <INFO_OPEN> ["1"-"9"] ["0"-"9"] ["0"-"9"] ["0"-"9"] <INFO_CLOSE> >
|<PUBLISHER:("p"|"P")("u"|"U")("b"|"B")("l"|"L")("i"|"I")("s"|"S")("h"|"H")("e"|"E")("r"|"R")>
	|<ENTRY_PUBLISHER: <PUBLISHER> "=" <INFO_OPEN> (["a"-"z","A"-"Z"])+ <INFO_CLOSE> >
|<KEY:("k"|"K")("e"|"E")("y"|"Y")>
	|<ENTRY_KEY: <KEY> "=" <INFO_OPEN> (["1"-"9"])+ <INFO_CLOSE> > // VERIFICAR!!!!!!!!!
|<VOLUME:("v"|"V")("o"|"O")("l"|"L")("u"|"U")("m"|"M")("e"|"E")>
	|<ENTRY_VOLUME: <VOLUME> <INFO_OPEN> ["1"-"9"] (["0"-"9"])* <INFO_CLOSE> >
|<NUMBER:("n"|"N")("u"|"U")("m"|"M")("b"|"B")("e"|"E")("r"|"R")>
	|<ENTRY_NUMBER: <NUMBER> <INFO_OPEN> ["1"-"9"] (["0"-"9"])* <INFO_CLOSE> >
|<SERIES:("s"|"S")("e"|"E")("r"|"R")("i"|"I")("e"|"E")("s"|"S")>
	|<ENTRY_SERIES: <SERIES> <INFO_OPEN> ["1"-"9"] (["0"-"9"])* <INFO_CLOSE> >
|<ADDRESS:("a"|"A")("d"|"D")("d"|"D")("r"|"R")("e"|"E")("s"|"S")("s"|"S")>
	|<ENTRY_ADDRESS: <ADDRESS> "=" <INFO_OPEN> (["a"-"z","A"-"Z"])+ <INFO_CLOSE> >
|<EDITION:("e"|"E")("d"|"D")("i"|"I")("t"|"T")("i"|"I")("o"|"O")("n"|"N")>
	|<ENTRY_EDITION: <EDITION> <INFO_OPEN> ["1"-"9"] (["0"-"9"])* <INFO_CLOSE> >
|<MONTH:("m"|"M")("o"|"O")("n"|"N")("t"|"T")("h"|"H")>
	|<ENTRY_MONTH: <MONTH> "=" <INFO_OPEN> (["a"-"z","A"-"Z"])+ <INFO_CLOSE> >
|<NOTE:("n"|"N")("o"|"O")("t"|"T")("e"|"E")>
	|<ENTRY_NOTE: <NOTE> "=" <INFO_OPEN> (["a"-"z","A"-"Z"])+ <INFO_CLOSE> >
|<ANNOTE:("a"|"A")("n"|"N")("n"|"N")("o"|"O")("t"|"T")("e"|"E")>
	|<ENTRY_ANNNOTE: <ANNOTE> <INFO_OPEN> (["a"-"z","A"-"Z"])+ <INFO_CLOSE> > // VERIFICAR!!!!!!!!!
|<PAGES:("p"|"P")("a"|"A")("g"|"G")("e"|"E")("s"|"S")>
	|<ENTRY_PAGES: "pages" <INFO_OPEN> ["1"-"9"] (["0"-"9"])* <INFO_CLOSE> >
|<JOURNAL:("j"|"J")("o"|"O")("u"|"U")("r"|"R")("n"|"N")("a"|"A")("l"|"L")>
	|<ENTRY_JOURNAL: <JOURNAL> <INFO_OPEN> (["a"-"z","A"-"Z"])+ <INFO_CLOSE> >
|<ORGANIZATION:("o"|"O")("r"|"R")("g"|"G")("a"|"A")("n"|"N")("i"|"I")("z"|"Z")("a"|"A")("t"|"T")("i"|"I")("o"|"O")("n"|"N")>
	|<ENTRY_ORGANIZATION: <ORGANIZATION> <INFO_OPEN> (["a"-"z","A"-"Z"])+ <INFO_CLOSE> >   
|<BOOKTITLE:("b"|"B")("o"|"O")("o"|"O")("k"|"K")("t"|"T")("i"|"I")("t"|"T")("l"|"L")("e"|"E")>
	|<ENTRY_BOOKTITLE: <BOOKTITLE> "=" <INFO_OPEN> (["a"-"z","A"-"Z"])+ <INFO_CLOSE>  >
|<EDITOR:("e"|"E")("d"|"D")("i"|"I")("t"|"T")("o"|"O")("r"|"R")>
	|<ENTRY_EDITOR: <EDITOR> "=" <INFO_OPEN> (["a"-"z","A"-"Z"])+ <INFO_CLOSE>  >
|<SCHOOL:("s"|"S")("c"|"C")("h"|"H")("o"|"O")("o"|"O")("l"|"L")>
	|<ENTRY_SCHOOL: <SCHOOL> "=" <INFO_OPEN> (["a"-"z","A"-"Z"])+ <INFO_CLOSE>  >
|<TYPE:("t"|"T")("y"|"Y")("p"|"P")("e"|"E")>
	|<ENTRY_TYPE: <TYPE> "=" <INFO_OPEN> (["a"-"z","A"-"Z"])+ <INFO_CLOSE>  >
|<HOWPUBLISHED:("h"|"H")("o"|"O")("w"|"W")("p"|"P")("u"|"U")("b"|"B")("l"|"L")("i"|"I")("s"|"S")("h"|"H")("e"|"E")("d"|"D")>
	|<ENTRY_HOWPUBLISHED: <HOWPUBLISHED> "=" <INFO_OPEN> (["a"-"z","A"-"Z"])+ <INFO_CLOSE>  >
|<URL:("u"|"U")("r"|"R")("l"|"L")>  
	|<ENTRY_URL:  <URL> "=" <INFO_OPEN> (~["{","}","\""])+ <INFO_CLOSE>  >
	//===========================================
	//DEFINIÇOES BASICAS
	//===========================================
	|<ID: (["a"-"z","A"-"Z","0"-"9"])+>
	|<INFO_SEPARATOR: "," >
	|<START_ITEM: "@" >
	|<OPEN_ITEM: "{" >
	|<END_ITEM: "}" >

	|<INFO_OPEN: "{" | "\"" >
	|<INFO_CLOSE: "}" | "\"" >
	//|<NOT_OPEN_ITEM: (~["{","@","\n"," "])+ >
	//|<NOT_END_ITEM: (~["}","@","\n"," "])+ >
	
}

//<EXCEPTION_T> TOKEN: {:DEFAULT }//\n serve como eof temporariamente


//START=REFERENCIA
void Start() : {Token t1;}
{
	(Reference())+ "\n"//mudar p/ <EOF> + tarde
}


/*catch (ParseException e) {
	Token taux = getNextToken();
    System.out.println("Item not defined properly\n");// + e.toString());
    Token t;
    /*do {
      t = getNextToken();
    } while (t.kind != ID);*/
	//}

void Reference() : {Token t1; Token t2;}
{
try{
	(<START_ITEM>
	|{//start item missing
	Token taux = getToken(0);
	System.out.println("Warning:Item not opening with '@'. Immediately before line " + taux.beginLine + ",column " +  taux.beginColumn +";");}
	)
  
  try{
  	(//listing ok
	(t1=<T_ARTICLE> OpenItem(t1)        t2=checkID() {items.add(new Item(t1.image,t2.image));} Article(t1.image,t2.image) )
	|(t1=<T_BOOK> OpenItem(t1)          t2=checkID() {items.add(new Item(t1.image,t2.image));} Book(t1.image,t2.image) )
	|(t1=<T_MANUAL> OpenItem(t1)        t2=checkID() {items.add(new Item(t1.image,t2.image));} Manual(t1.image,t2.image) )
	|(t1=<T_MASTERSTHESIS> OpenItem(t1) t2=checkID() {items.add(new Item(t1.image,t2.image));} MasterThesis(t1.image,t2.image)  )
	|(t1=<T_MISC> OpenItem(t1)          t2=checkID() {items.add(new Item(t1.image,t2.image));} Misc(t1.image,t2.image)  )
	|(t1=<T_PHDTHESIS> OpenItem(t1)     t2=checkID() {items.add(new Item(t1.image,t2.image));} PhdThesis(t1.image,t2.image) ) 
	|(t1=<T_PROCEEDINGS> OpenItem(t1)   t2=checkID() {items.add(new Item(t1.image,t2.image));} Proceedings(t1.image,t2.image)  )
	)//end of listing ok
	}
	catch (ParseException e) {
	Token te = getToken(0);
    System.out.println("Error(Line:" + te.endLine +"|Column:" + te.endColumn +"):Item badly defined;");// + e.toString());
	throw e;
	}
	
	CloseItem()
	}catch (ParseException e) {
	    Token t;
    do {
      t = getNextToken();
    } while (t.kind != START_ITEM && t.kind != END_ITEM);
	}
}

void OpenItem(Token t1) : {}
{
try{
	<OPEN_ITEM>
	}
catch (ParseException e) {
    System.out.println("Warning:"+t1.image + " not opened at line " + t1.endLine + ", column " + t1.endColumn + ";");// + e.toString());
	}	
}

Token checkID() : { Token t1; }
{
	t1=<ID>
	{return t1;}
}


void CloseItem() : {}
{
try{
  <END_ITEM>
  }catch (ParseException e)
  {
	Token taux = getToken(0);
	System.out.println("Warning:Not closing item with '}'. At line " + taux.beginLine + ",column " +  taux.beginColumn +";");
	throw e;
	}
}

void Article(String type,String id) : {Token t1;}
{
	<INFO_SEPARATOR> ArticleEntry(type,id) [Article(type,id)] 
}
void ArticleEntry(String type,String id) : {Token t1;}
{
try{
(
  t1=<ENTRY_AUTHOR> | t1=<ENTRY_TITLE> | t1=<ENTRY_JOURNAL> | t1=<ENTRY_YEAR> | t1=<ENTRY_KEY> |t1=<ENTRY_VOLUME> | t1=<ENTRY_NUMBER> |
  t1=<ENTRY_PAGES> | t1=<ENTRY_MONTH> | t1=<ENTRY_NOTE> | t1=<ENTRY_ANNNOTE> | t1=<ENTRY_URL>
  ){items.get(items.size()-1).addEntry(t1.image); } 
}
	catch (ParseException e) {
	Token te = getToken(1);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"> has an invalid or badly defined entry:" + te.image + ";");
	}
}
void Book(String type,String id) : {Token t1;}
{
	<INFO_SEPARATOR> BookEntry(type,id) [Book(type,id)] 
}
void BookEntry(String type,String id):{Token t1;}
{
try{
(
 t1=<ENTRY_AUTHOR> | t1=<ENTRY_TITLE> | t1=<ENTRY_YEAR> | t1=<ENTRY_PUBLISHER>
 | t1=<ENTRY_KEY> | t1=<ENTRY_VOLUME> | t1=<ENTRY_NUMBER> 
 | t1=<ENTRY_SERIES> |t1=<ENTRY_ADDRESS> |t1=<ENTRY_EDITION>
 | t1=<ENTRY_MONTH> | t1=<ENTRY_NOTE> | t1=<ENTRY_ANNNOTE> | t1=<ENTRY_URL> 
 ) {items.get(items.size()-1).addEntry(t1.image); } 
}
	catch (ParseException e) {
	Token te = getToken(1);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"> has an invalid or badly defined entry:" + te.image + ";");
	}
}

void Manual(String type,String id) : {Token t1;}
{
	<INFO_SEPARATOR> ManualEntry(type,id) [Manual(type,id)] 
}
void ManualEntry(String type,String id) :  {Token t1;}
{
try{
(
  t1=<ENTRY_TITLE> | t1=<ENTRY_KEY> | t1=<ENTRY_AUTHOR> | t1=<ENTRY_ORGANIZATION> | t1=<ENTRY_ADDRESS> | t1=<ENTRY_EDITION> |
                  t1=<ENTRY_MONTH> | t1=<ENTRY_YEAR> | t1=<ENTRY_NOTE> | t1=<ENTRY_ANNNOTE> | t1=<ENTRY_URL> 
){items.get(items.size()-1).addEntry(t1.image); } 
}
	catch (ParseException e) {
	Token te = getToken(1);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"> has an invalid or badly defined entry:" + te.image + ";");
	}
}

void MasterThesis(String type,String id) : {Token t1;}
{
	<INFO_SEPARATOR> MasterThesisEntry(type,id) [MasterThesis(type,id)] 
}
void MasterThesisEntry(String type,String id): {Token t1;}
{
try{
(
  t1=<ENTRY_AUTHOR> | t1=<ENTRY_TITLE> | t1=<ENTRY_SCHOOL> | t1=<ENTRY_YEAR> | t1=<ENTRY_KEY> |t1=<ENTRY_TYPE> | t1=<ENTRY_ADDRESS> |
                       t1=<ENTRY_MONTH> | t1=<ENTRY_NOTE> | t1=<ENTRY_ANNNOTE> | t1=<ENTRY_URL> 
){items.get(items.size()-1).addEntry(t1.image); } 
}
	catch (ParseException e) {
	Token te = getToken(1);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"> has an invalid or badly defined entry:" + te.image + ";");
	}
}

void Misc(String type,String id) : {Token t1;}
{
	<INFO_SEPARATOR> MiscEntry(type,id) [Misc(type,id)] 
}
void MiscEntry(String type,String id): {Token t1;}
{
try{
(
 t1=<ENTRY_KEY> | t1=<ENTRY_AUTHOR> | t1=<ENTRY_TITLE> | t1=<ENTRY_HOWPUBLISHED> | t1=<ENTRY_MONTH> | t1=<ENTRY_YEAR> | t1=<ENTRY_NOTE> | 
            t1=<ENTRY_ANNNOTE> | t1=<ENTRY_URL> 
){items.get(items.size()-1).addEntry(t1.image); } 
}
	catch (ParseException e) {
	Token te = getToken(1);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"> has an invalid or badly defined entry:" + te.image + ";");
	}
}

void PhdThesis(String type,String id) : {Token t1;}
{
	<INFO_SEPARATOR> PhdThesisEntry(type,id) [PhdThesis(type,id)] 
}
void PhdThesisEntry(String type,String id): {Token t1;}
{
try{
(
  t1=<ENTRY_AUTHOR> | t1=<ENTRY_TITLE> | t1=<ENTRY_SCHOOL> | t1=<ENTRY_YEAR> | t1=<ENTRY_KEY> |t1=<ENTRY_TYPE> | t1=<ENTRY_ADDRESS> |
                    t1=<ENTRY_MONTH> | t1=<ENTRY_NOTE> | t1=<ENTRY_ANNNOTE> | t1=<ENTRY_URL> 
){items.get(items.size()-1).addEntry(t1.image); } 
}
	catch (ParseException e) {
	Token te = getToken(1);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"> has an invalid or badly defined entry:" + te.image + ";");
	}
}

void Proceedings(String type,String id) : {Token t1;}
{
	<INFO_SEPARATOR> ProceedingsEntry(type,id) [Proceedings(type,id)]
}
void ProceedingsEntry(String type,String id): {Token t1;}
{
try{
(
 t1=<ENTRY_TITLE> | t1=<ENTRY_KEY> | t1=<ENTRY_BOOKTITLE> | t1=<ENTRY_EDITOR> | t1=<ENTRY_VOLUME> | t1=<ENTRY_NUMBER> | t1=<ENTRY_SERIES> | 
             t1=<ENTRY_ADDRESS> | t1=<ENTRY_MONTH> | t1=<ENTRY_ORGANIZATION> | t1=<ENTRY_PUBLISHER> | t1=<ENTRY_NOTE> | t1=<ENTRY_ANNNOTE> 
){items.get(items.size()-1).addEntry(t1.image); } 
}
	catch (ParseException e) {
	Token te = getToken(1);
    System.out.println("Error(Line:"+ te.endLine + "|Column:"+ te.endColumn +"):Item with <Type:" + type+ "|ID:" +id+"> has an invalid or badly defined entry:" + te.image + ";");
	}
}